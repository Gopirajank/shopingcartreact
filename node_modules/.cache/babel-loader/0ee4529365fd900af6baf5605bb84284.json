{"ast":null,"code":"// src/index.ts\nimport * as React2 from \"react\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector2 } from \"use-sync-external-store/with-selector.js\"; // src/utils/react.ts\n\nimport * as ReactOriginal from \"react\";\nvar React = // prettier-ignore\n// @ts-ignore\n\"default\" in ReactOriginal ? ReactOriginal[\"default\"] : ReactOriginal; // src/components/Context.ts\n\nvar ContextKey = Symbol.for(`react-redux-context`);\nvar gT = typeof globalThis !== \"undefined\" ? globalThis :\n/* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */\n{};\n\nfunction getContext() {\n  if (!React.createContext) return {};\n  const contextMap = gT[ContextKey] ?? (gT[ContextKey] = /* @__PURE__ */new Map());\n  let realContext = contextMap.get(React.createContext);\n\n  if (!realContext) {\n    realContext = React.createContext(null);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      realContext.displayName = \"ReactRedux\";\n    }\n\n    contextMap.set(React.createContext, realContext);\n  }\n\n  return realContext;\n}\n\nvar ReactReduxContext = /* @__PURE__ */getContext(); // src/utils/useSyncExternalStore.ts\n\nvar notInitialized = () => {\n  throw new Error(\"uSES not initialized!\");\n}; // src/hooks/useReduxContext.ts\n\n\nfunction createReduxContextHook() {\n  let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;\n  return function useReduxContext2() {\n    const contextValue = React.useContext(context);\n\n    if (process.env.NODE_ENV !== \"production\" && !contextValue) {\n      throw new Error(\"could not find react-redux context value; please ensure the component is wrapped in a <Provider>\");\n    }\n\n    return contextValue;\n  };\n}\n\nvar useReduxContext = /* @__PURE__ */createReduxContextHook(); // src/hooks/useSelector.ts\n\nvar useSyncExternalStoreWithSelector = notInitialized;\n\nvar initializeUseSelector = fn => {\n  useSyncExternalStoreWithSelector = fn;\n};\n\nvar refEquality = (a, b) => a === b;\n\nfunction createSelectorHook() {\n  let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;\n  const useReduxContext2 = context === ReactReduxContext ? useReduxContext : createReduxContextHook(context);\n  return function useSelector2(selector) {\n    let equalityFnOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      equalityFn = refEquality,\n      devModeChecks = {}\n    } = typeof equalityFnOrOptions === \"function\" ? {\n      equalityFn: equalityFnOrOptions\n    } : equalityFnOrOptions;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`);\n      }\n\n      if (typeof selector !== \"function\") {\n        throw new Error(`You must pass a function as a selector to useSelector`);\n      }\n\n      if (typeof equalityFn !== \"function\") {\n        throw new Error(`You must pass a function as an equality function to useSelector`);\n      }\n    }\n\n    const {\n      store,\n      subscription,\n      getServerState,\n      stabilityCheck,\n      identityFunctionCheck\n    } = useReduxContext2();\n    const firstRun = React.useRef(true);\n    const wrappedSelector = React.useCallback({\n      [selector.name](state) {\n        const selected = selector(state);\n\n        if (process.env.NODE_ENV !== \"production\") {\n          const {\n            identityFunctionCheck: finalIdentityFunctionCheck,\n            stabilityCheck: finalStabilityCheck\n          } = {\n            stabilityCheck,\n            identityFunctionCheck,\n            ...devModeChecks\n          };\n\n          if (finalStabilityCheck === \"always\" || finalStabilityCheck === \"once\" && firstRun.current) {\n            const toCompare = selector(state);\n\n            if (!equalityFn(selected, toCompare)) {\n              let stack = void 0;\n\n              try {\n                throw new Error();\n              } catch (e) {\n                ;\n                ({\n                  stack\n                } = e);\n              }\n\n              console.warn(\"Selector \" + (selector.name || \"unknown\") + \" returned a different result when called with the same parameters. This can lead to unnecessary rerenders.\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization\", {\n                state,\n                selected,\n                selected2: toCompare,\n                stack\n              });\n            }\n          }\n\n          if (finalIdentityFunctionCheck === \"always\" || finalIdentityFunctionCheck === \"once\" && firstRun.current) {\n            if (selected === state) {\n              let stack = void 0;\n\n              try {\n                throw new Error();\n              } catch (e) {\n                ;\n                ({\n                  stack\n                } = e);\n              }\n\n              console.warn(\"Selector \" + (selector.name || \"unknown\") + \" returned the root state when called. This can lead to unnecessary rerenders.\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.\", {\n                stack\n              });\n            }\n          }\n\n          if (firstRun.current) firstRun.current = false;\n        }\n\n        return selected;\n      }\n\n    }[selector.name], [selector, stabilityCheck, devModeChecks.stabilityCheck]);\n    const selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, wrappedSelector, equalityFn);\n    React.useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n\nvar useSelector = /* @__PURE__ */createSelectorHook(); // src/utils/react-is.ts\n\nvar REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\nvar REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\nvar REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\nvar REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\nvar REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\nvar REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\nvar REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\nvar REACT_SERVER_CONTEXT_TYPE = Symbol.for(\"react.server_context\");\nvar REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\nvar REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\nvar REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\nvar REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\nvar REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\nvar REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Memo = REACT_MEMO_TYPE;\n\nfunction isValidElementType(type) {\n  if (typeof type === \"string\" || typeof type === \"function\") {\n    return true;\n  }\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE) {\n    return true;\n  }\n\n  if (typeof type === \"object\" && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE || type.getModuleId !== void 0) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction typeOf(object) {\n  if (typeof object === \"object\" && object !== null) {\n    const $$typeof = object.$$typeof;\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        {\n          const type = object.type;\n\n          switch (type) {\n            case REACT_FRAGMENT_TYPE:\n            case REACT_PROFILER_TYPE:\n            case REACT_STRICT_MODE_TYPE:\n            case REACT_SUSPENSE_TYPE:\n            case REACT_SUSPENSE_LIST_TYPE:\n              return type;\n\n            default:\n              {\n                const $$typeofType = type && type.$$typeof;\n\n                switch ($$typeofType) {\n                  case REACT_SERVER_CONTEXT_TYPE:\n                  case REACT_CONTEXT_TYPE:\n                  case REACT_FORWARD_REF_TYPE:\n                  case REACT_LAZY_TYPE:\n                  case REACT_MEMO_TYPE:\n                  case REACT_PROVIDER_TYPE:\n                    return $$typeofType;\n\n                  default:\n                    return $$typeof;\n                }\n              }\n          }\n        }\n\n      case REACT_PORTAL_TYPE:\n        {\n          return $$typeof;\n        }\n    }\n  }\n\n  return void 0;\n}\n\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\n\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n} // src/utils/warning.ts\n\n\nfunction warning(message) {\n  if (typeof console !== \"undefined\" && typeof console.error === \"function\") {\n    console.error(message);\n  }\n\n  try {\n    throw new Error(message);\n  } catch (e) {}\n} // src/connect/verifySubselectors.ts\n\n\nfunction verify(selector, methodName) {\n  if (!selector) {\n    throw new Error(`Unexpected value for ${methodName} in connect.`);\n  } else if (methodName === \"mapStateToProps\" || methodName === \"mapDispatchToProps\") {\n    if (!Object.prototype.hasOwnProperty.call(selector, \"dependsOnOwnProps\")) {\n      warning(`The selector for ${methodName} of connect did not specify a value for dependsOnOwnProps.`);\n    }\n  }\n}\n\nfunction verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps) {\n  verify(mapStateToProps, \"mapStateToProps\");\n  verify(mapDispatchToProps, \"mapDispatchToProps\");\n  verify(mergeProps, \"mergeProps\");\n} // src/connect/selectorFactory.ts\n\n\nfunction pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {\n  let {\n    areStatesEqual,\n    areOwnPropsEqual,\n    areStatePropsEqual\n  } = _ref;\n  let hasRunAtLeastOnce = false;\n  let state;\n  let ownProps;\n  let stateProps;\n  let dispatchProps;\n  let mergedProps;\n\n  function handleFirstCall(firstState, firstOwnProps) {\n    state = firstState;\n    ownProps = firstOwnProps;\n    stateProps = mapStateToProps(state, ownProps);\n    dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    hasRunAtLeastOnce = true;\n    return mergedProps;\n  }\n\n  function handleNewPropsAndNewState() {\n    stateProps = mapStateToProps(state, ownProps);\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleNewProps() {\n    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleNewState() {\n    const nextStateProps = mapStateToProps(state, ownProps);\n    const statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);\n    stateProps = nextStateProps;\n    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleSubsequentCalls(nextState, nextOwnProps) {\n    const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);\n    const stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);\n    state = nextState;\n    ownProps = nextOwnProps;\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState();\n    if (propsChanged) return handleNewProps();\n    if (stateChanged) return handleNewState();\n    return mergedProps;\n  }\n\n  return function pureFinalPropsSelector(nextState, nextOwnProps) {\n    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);\n  };\n}\n\nfunction finalPropsSelectorFactory(dispatch, _ref2) {\n  let {\n    initMapStateToProps,\n    initMapDispatchToProps,\n    initMergeProps,\n    ...options\n  } = _ref2;\n  const mapStateToProps = initMapStateToProps(dispatch, options);\n  const mapDispatchToProps = initMapDispatchToProps(dispatch, options);\n  const mergeProps = initMergeProps(dispatch, options);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps);\n  }\n\n  return pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);\n} // src/utils/bindActionCreators.ts\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  const boundActionCreators = {};\n\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === \"function\") {\n      boundActionCreators[key] = function () {\n        return dispatch(actionCreator(...arguments));\n      };\n    }\n  }\n\n  return boundActionCreators;\n} // src/utils/isPlainObject.ts\n\n\nfunction isPlainObject(obj) {\n  if (typeof obj !== \"object\" || obj === null) return false;\n  let proto = Object.getPrototypeOf(obj);\n  if (proto === null) return true;\n  let baseProto = proto;\n\n  while (Object.getPrototypeOf(baseProto) !== null) {\n    baseProto = Object.getPrototypeOf(baseProto);\n  }\n\n  return proto === baseProto;\n} // src/utils/verifyPlainObject.ts\n\n\nfunction verifyPlainObject(value, displayName, methodName) {\n  if (!isPlainObject(value)) {\n    warning(`${methodName}() in ${displayName} must return a plain object. Instead received ${value}.`);\n  }\n} // src/connect/wrapMapToProps.ts\n\n\nfunction wrapMapToPropsConstant(getConstant) {\n  return function initConstantSelector(dispatch) {\n    const constant = getConstant(dispatch);\n\n    function constantSelector() {\n      return constant;\n    }\n\n    constantSelector.dependsOnOwnProps = false;\n    return constantSelector;\n  };\n}\n\nfunction getDependsOnOwnProps(mapToProps) {\n  return mapToProps.dependsOnOwnProps ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;\n}\n\nfunction wrapMapToPropsFunc(mapToProps, methodName) {\n  return function initProxySelector(dispatch, _ref3) {\n    let {\n      displayName\n    } = _ref3;\n\n    const proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {\n      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch, void 0);\n    };\n\n    proxy.dependsOnOwnProps = true;\n\n    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {\n      proxy.mapToProps = mapToProps;\n      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);\n      let props = proxy(stateOrDispatch, ownProps);\n\n      if (typeof props === \"function\") {\n        proxy.mapToProps = props;\n        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);\n        props = proxy(stateOrDispatch, ownProps);\n      }\n\n      if (process.env.NODE_ENV !== \"production\") verifyPlainObject(props, displayName, methodName);\n      return props;\n    };\n\n    return proxy;\n  };\n} // src/connect/invalidArgFactory.ts\n\n\nfunction createInvalidArgFactory(arg, name) {\n  return (dispatch, options) => {\n    throw new Error(`Invalid value of type ${typeof arg} for ${name} argument when connecting component ${options.wrappedComponentName}.`);\n  };\n} // src/connect/mapDispatchToProps.ts\n\n\nfunction mapDispatchToPropsFactory(mapDispatchToProps) {\n  return mapDispatchToProps && typeof mapDispatchToProps === \"object\" ? wrapMapToPropsConstant(dispatch => // @ts-ignore\n  bindActionCreators(mapDispatchToProps, dispatch)) : !mapDispatchToProps ? wrapMapToPropsConstant(dispatch => ({\n    dispatch\n  })) : typeof mapDispatchToProps === \"function\" ? // @ts-ignore\n  wrapMapToPropsFunc(mapDispatchToProps, \"mapDispatchToProps\") : createInvalidArgFactory(mapDispatchToProps, \"mapDispatchToProps\");\n} // src/connect/mapStateToProps.ts\n\n\nfunction mapStateToPropsFactory(mapStateToProps) {\n  return !mapStateToProps ? wrapMapToPropsConstant(() => ({})) : typeof mapStateToProps === \"function\" ? // @ts-ignore\n  wrapMapToPropsFunc(mapStateToProps, \"mapStateToProps\") : createInvalidArgFactory(mapStateToProps, \"mapStateToProps\");\n} // src/connect/mergeProps.ts\n\n\nfunction defaultMergeProps(stateProps, dispatchProps, ownProps) {\n  return { ...ownProps,\n    ...stateProps,\n    ...dispatchProps\n  };\n}\n\nfunction wrapMergePropsFunc(mergeProps) {\n  return function initMergePropsProxy(dispatch, _ref4) {\n    let {\n      displayName,\n      areMergedPropsEqual\n    } = _ref4;\n    let hasRunOnce = false;\n    let mergedProps;\n    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {\n      const nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n\n      if (hasRunOnce) {\n        if (!areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;\n      } else {\n        hasRunOnce = true;\n        mergedProps = nextMergedProps;\n        if (process.env.NODE_ENV !== \"production\") verifyPlainObject(mergedProps, displayName, \"mergeProps\");\n      }\n\n      return mergedProps;\n    };\n  };\n}\n\nfunction mergePropsFactory(mergeProps) {\n  return !mergeProps ? () => defaultMergeProps : typeof mergeProps === \"function\" ? wrapMergePropsFunc(mergeProps) : createInvalidArgFactory(mergeProps, \"mergeProps\");\n} // src/utils/batch.ts\n\n\nfunction defaultNoopBatch(callback) {\n  callback();\n} // src/utils/Subscription.ts\n\n\nfunction createListenerCollection() {\n  let first = null;\n  let last = null;\n  return {\n    clear() {\n      first = null;\n      last = null;\n    },\n\n    notify() {\n      defaultNoopBatch(() => {\n        let listener = first;\n\n        while (listener) {\n          listener.callback();\n          listener = listener.next;\n        }\n      });\n    },\n\n    get() {\n      let listeners = [];\n      let listener = first;\n\n      while (listener) {\n        listeners.push(listener);\n        listener = listener.next;\n      }\n\n      return listeners;\n    },\n\n    subscribe(callback) {\n      let isSubscribed = true;\n      let listener = last = {\n        callback,\n        next: null,\n        prev: last\n      };\n\n      if (listener.prev) {\n        listener.prev.next = listener;\n      } else {\n        first = listener;\n      }\n\n      return function unsubscribe() {\n        if (!isSubscribed || first === null) return;\n        isSubscribed = false;\n\n        if (listener.next) {\n          listener.next.prev = listener.prev;\n        } else {\n          last = listener.prev;\n        }\n\n        if (listener.prev) {\n          listener.prev.next = listener.next;\n        } else {\n          first = listener.next;\n        }\n      };\n    }\n\n  };\n}\n\nvar nullListeners = {\n  notify() {},\n\n  get: () => []\n};\n\nfunction createSubscription(store, parentSub) {\n  let unsubscribe;\n  let listeners = nullListeners;\n  let subscriptionsAmount = 0;\n  let selfSubscribed = false;\n\n  function addNestedSub(listener) {\n    trySubscribe();\n    const cleanupListener = listeners.subscribe(listener);\n    let removed = false;\n    return () => {\n      if (!removed) {\n        removed = true;\n        cleanupListener();\n        tryUnsubscribe();\n      }\n    };\n  }\n\n  function notifyNestedSubs() {\n    listeners.notify();\n  }\n\n  function handleChangeWrapper() {\n    if (subscription.onStateChange) {\n      subscription.onStateChange();\n    }\n  }\n\n  function isSubscribed() {\n    return selfSubscribed;\n  }\n\n  function trySubscribe() {\n    subscriptionsAmount++;\n\n    if (!unsubscribe) {\n      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);\n      listeners = createListenerCollection();\n    }\n  }\n\n  function tryUnsubscribe() {\n    subscriptionsAmount--;\n\n    if (unsubscribe && subscriptionsAmount === 0) {\n      unsubscribe();\n      unsubscribe = void 0;\n      listeners.clear();\n      listeners = nullListeners;\n    }\n  }\n\n  function trySubscribeSelf() {\n    if (!selfSubscribed) {\n      selfSubscribed = true;\n      trySubscribe();\n    }\n  }\n\n  function tryUnsubscribeSelf() {\n    if (selfSubscribed) {\n      selfSubscribed = false;\n      tryUnsubscribe();\n    }\n  }\n\n  const subscription = {\n    addNestedSub,\n    notifyNestedSubs,\n    handleChangeWrapper,\n    isSubscribed,\n    trySubscribe: trySubscribeSelf,\n    tryUnsubscribe: tryUnsubscribeSelf,\n    getListeners: () => listeners\n  };\n  return subscription;\n} // src/utils/useIsomorphicLayoutEffect.ts\n\n\nvar canUseDOM = !!(typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\");\nvar useIsomorphicLayoutEffect = canUseDOM ? React.useLayoutEffect : React.useEffect; // src/utils/shallowEqual.ts\n\nfunction is(x, y) {\n  if (x === y) {\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) return true;\n\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n  if (keysA.length !== keysB.length) return false;\n\n  for (let i = 0; i < keysA.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n} // src/utils/hoistStatics.ts\n\n\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  $$typeof: true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  $$typeof: true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {\n  [ForwardRef]: FORWARD_REF_STATICS,\n  [Memo]: MEMO_STATICS\n};\n\nfunction getStatics(component) {\n  if (isMemo(component)) {\n    return MEMO_STATICS;\n  }\n\n  return TYPE_STATICS[component[\"$$typeof\"]] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\n\nfunction hoistNonReactStatics(targetComponent, sourceComponent) {\n  if (typeof sourceComponent !== \"string\") {\n    if (objectPrototype) {\n      const inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent);\n      }\n    }\n\n    let keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    const targetStatics = getStatics(targetComponent);\n    const sourceStatics = getStatics(sourceComponent);\n\n    for (let i = 0; i < keys.length; ++i) {\n      const key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        const descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n} // src/components/connect.tsx\n\n\nvar useSyncExternalStore = notInitialized;\n\nvar initializeConnect = fn => {\n  useSyncExternalStore = fn;\n};\n\nvar NO_SUBSCRIPTION_ARRAY = [null, null];\n\nvar stringifyComponent = Comp => {\n  try {\n    return JSON.stringify(Comp);\n  } catch (err) {\n    return String(Comp);\n  }\n};\n\nfunction useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {\n  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies);\n}\n\nfunction captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs) {\n  lastWrapperProps.current = wrapperProps;\n  renderIsScheduled.current = false;\n\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null;\n    notifyNestedSubs();\n  }\n}\n\nfunction subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, additionalSubscribeListener) {\n  if (!shouldHandleStateChanges) return () => {};\n  let didUnsubscribe = false;\n  let lastThrownError = null;\n\n  const checkForUpdates = () => {\n    if (didUnsubscribe || !isMounted.current) {\n      return;\n    }\n\n    const latestStoreState = store.getState();\n    let newChildProps, error;\n\n    try {\n      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);\n    } catch (e) {\n      error = e;\n      lastThrownError = e;\n    }\n\n    if (!error) {\n      lastThrownError = null;\n    }\n\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs();\n      }\n    } else {\n      lastChildProps.current = newChildProps;\n      childPropsFromStoreUpdate.current = newChildProps;\n      renderIsScheduled.current = true;\n      additionalSubscribeListener();\n    }\n  };\n\n  subscription.onStateChange = checkForUpdates;\n  subscription.trySubscribe();\n  checkForUpdates();\n\n  const unsubscribeWrapper = () => {\n    didUnsubscribe = true;\n    subscription.tryUnsubscribe();\n    subscription.onStateChange = null;\n\n    if (lastThrownError) {\n      throw lastThrownError;\n    }\n  };\n\n  return unsubscribeWrapper;\n}\n\nfunction strictEqual(a, b) {\n  return a === b;\n}\n\nvar hasWarnedAboutDeprecatedPureOption = false;\n\nfunction connect(mapStateToProps, mapDispatchToProps, mergeProps) {\n  let {\n    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\n    // @ts-ignore\n    pure,\n    areStatesEqual = strictEqual,\n    areOwnPropsEqual = shallowEqual,\n    areStatePropsEqual = shallowEqual,\n    areMergedPropsEqual = shallowEqual,\n    // use React's forwardRef to expose a ref of the wrapped component\n    forwardRef = false,\n    // the context consumer to use\n    context = ReactReduxContext\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (pure !== void 0 && !hasWarnedAboutDeprecatedPureOption) {\n      hasWarnedAboutDeprecatedPureOption = true;\n      warning('The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component');\n    }\n  }\n\n  const Context = context;\n  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps);\n  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);\n  const initMergeProps = mergePropsFactory(mergeProps);\n  const shouldHandleStateChanges = Boolean(mapStateToProps);\n\n  const wrapWithConnect = WrappedComponent => {\n    if (process.env.NODE_ENV !== \"production\") {\n      const isValid = /* @__PURE__ */isValidElementType(WrappedComponent);\n      if (!isValid) throw new Error(`You must pass a component to the function returned by connect. Instead received ${stringifyComponent(WrappedComponent)}`);\n    }\n\n    const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n    const displayName = `Connect(${wrappedComponentName})`;\n    const selectorFactoryOptions = {\n      shouldHandleStateChanges,\n      displayName,\n      wrappedComponentName,\n      WrappedComponent,\n      // @ts-ignore\n      initMapStateToProps,\n      // @ts-ignore\n      initMapDispatchToProps,\n      initMergeProps,\n      areStatesEqual,\n      areStatePropsEqual,\n      areOwnPropsEqual,\n      areMergedPropsEqual\n    };\n\n    function ConnectFunction(props) {\n      const [propsContext, reactReduxForwardedRef, wrapperProps] = React.useMemo(() => {\n        const {\n          reactReduxForwardedRef: reactReduxForwardedRef2,\n          ...wrapperProps2\n        } = props;\n        return [props.context, reactReduxForwardedRef2, wrapperProps2];\n      }, [props]);\n      const ContextToUse = React.useMemo(() => {\n        let ResultContext = Context;\n\n        if (propsContext?.Consumer) {\n          if (process.env.NODE_ENV !== \"production\") {\n            const isValid = /* @__PURE__ */isContextConsumer( // @ts-ignore\n\n            /* @__PURE__ */\n            React.createElement(propsContext.Consumer, null));\n\n            if (!isValid) {\n              throw new Error(\"You must pass a valid React context consumer as `props.context`\");\n            }\n\n            ResultContext = propsContext;\n          }\n        }\n\n        return ResultContext;\n      }, [propsContext, Context]);\n      const contextValue = React.useContext(ContextToUse);\n      const didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);\n      const didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);\n\n      if (process.env.NODE_ENV !== \"production\" && !didStoreComeFromProps && !didStoreComeFromContext) {\n        throw new Error(`Could not find \"store\" in the context of \"${displayName}\". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to ${displayName} in connect options.`);\n      }\n\n      const store = didStoreComeFromProps ? props.store : contextValue.store;\n      const getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;\n      const childPropsSelector = React.useMemo(() => {\n        return finalPropsSelectorFactory(store.dispatch, selectorFactoryOptions);\n      }, [store]);\n      const [subscription, notifyNestedSubs] = React.useMemo(() => {\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY;\n        const subscription2 = createSubscription(store, didStoreComeFromProps ? void 0 : contextValue.subscription);\n        const notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);\n        return [subscription2, notifyNestedSubs2];\n      }, [store, didStoreComeFromProps, contextValue]);\n      const overriddenContextValue = React.useMemo(() => {\n        if (didStoreComeFromProps) {\n          return contextValue;\n        }\n\n        return { ...contextValue,\n          subscription\n        };\n      }, [didStoreComeFromProps, contextValue, subscription]);\n      const lastChildProps = React.useRef();\n      const lastWrapperProps = React.useRef(wrapperProps);\n      const childPropsFromStoreUpdate = React.useRef();\n      const renderIsScheduled = React.useRef(false);\n      const isProcessingDispatch = React.useRef(false);\n      const isMounted = React.useRef(false);\n      const latestSubscriptionCallbackError = React.useRef();\n      useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n          isMounted.current = false;\n        };\n      }, []);\n      const actualChildPropsSelector = React.useMemo(() => {\n        const selector = () => {\n          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {\n            return childPropsFromStoreUpdate.current;\n          }\n\n          return childPropsSelector(store.getState(), wrapperProps);\n        };\n\n        return selector;\n      }, [store, wrapperProps]);\n      const subscribeForReact = React.useMemo(() => {\n        const subscribe = reactListener => {\n          if (!subscription) {\n            return () => {};\n          }\n\n          return subscribeUpdates(shouldHandleStateChanges, store, subscription, // @ts-ignore\n          childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, reactListener);\n        };\n\n        return subscribe;\n      }, [subscription]);\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);\n      let actualChildProps;\n\n      try {\n        actualChildProps = useSyncExternalStore( // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\n        subscribeForReact, // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\n        // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\n        actualChildPropsSelector, getServerState ? () => childPropsSelector(getServerState(), wrapperProps) : actualChildPropsSelector);\n      } catch (err) {\n        if (latestSubscriptionCallbackError.current) {\n          ;\n          err.message += `\nThe error may be correlated with this previous error:\n${latestSubscriptionCallbackError.current.stack}\n\n`;\n        }\n\n        throw err;\n      }\n\n      useIsomorphicLayoutEffect(() => {\n        latestSubscriptionCallbackError.current = void 0;\n        childPropsFromStoreUpdate.current = void 0;\n        lastChildProps.current = actualChildProps;\n      });\n      const renderedWrappedComponent = React.useMemo(() => {\n        return (// @ts-ignore\n\n          /* @__PURE__ */\n          React.createElement(WrappedComponent, { ...actualChildProps,\n            ref: reactReduxForwardedRef\n          })\n        );\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);\n      const renderedChild = React.useMemo(() => {\n        if (shouldHandleStateChanges) {\n          return /* @__PURE__ */React.createElement(ContextToUse.Provider, {\n            value: overriddenContextValue\n          }, renderedWrappedComponent);\n        }\n\n        return renderedWrappedComponent;\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);\n      return renderedChild;\n    }\n\n    const _Connect = React.memo(ConnectFunction);\n\n    const Connect = _Connect;\n    Connect.WrappedComponent = WrappedComponent;\n    Connect.displayName = ConnectFunction.displayName = displayName;\n\n    if (forwardRef) {\n      const _forwarded = React.forwardRef(function forwardConnectRef(props, ref) {\n        return /* @__PURE__ */React.createElement(Connect, { ...props,\n          reactReduxForwardedRef: ref\n        });\n      });\n\n      const forwarded = _forwarded;\n      forwarded.displayName = displayName;\n      forwarded.WrappedComponent = WrappedComponent;\n      return /* @__PURE__ */hoistNonReactStatics(forwarded, WrappedComponent);\n    }\n\n    return /* @__PURE__ */hoistNonReactStatics(Connect, WrappedComponent);\n  };\n\n  return wrapWithConnect;\n}\n\nvar connect_default = connect; // src/components/Provider.tsx\n\nfunction Provider(_ref5) {\n  let {\n    store,\n    context,\n    children,\n    serverState,\n    stabilityCheck = \"once\",\n    identityFunctionCheck = \"once\"\n  } = _ref5;\n  const contextValue = React.useMemo(() => {\n    const subscription = createSubscription(store);\n    return {\n      store,\n      subscription,\n      getServerState: serverState ? () => serverState : void 0,\n      stabilityCheck,\n      identityFunctionCheck\n    };\n  }, [store, serverState, stabilityCheck, identityFunctionCheck]);\n  const previousState = React.useMemo(() => store.getState(), [store]);\n  useIsomorphicLayoutEffect(() => {\n    const {\n      subscription\n    } = contextValue;\n    subscription.onStateChange = subscription.notifyNestedSubs;\n    subscription.trySubscribe();\n\n    if (previousState !== store.getState()) {\n      subscription.notifyNestedSubs();\n    }\n\n    return () => {\n      subscription.tryUnsubscribe();\n      subscription.onStateChange = void 0;\n    };\n  }, [contextValue, previousState]);\n  const Context = context || ReactReduxContext;\n  return /* @__PURE__ */React.createElement(Context.Provider, {\n    value: contextValue\n  }, children);\n}\n\nvar Provider_default = Provider; // src/hooks/useStore.ts\n\nfunction createStoreHook() {\n  let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;\n  const useReduxContext2 = // @ts-ignore\n  context === ReactReduxContext ? useReduxContext : // @ts-ignore\n  createReduxContextHook(context);\n  return function useStore2() {\n    const {\n      store\n    } = useReduxContext2();\n    return store;\n  };\n}\n\nvar useStore = /* @__PURE__ */createStoreHook(); // src/hooks/useDispatch.ts\n\nfunction createDispatchHook() {\n  let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;\n  const useStore2 = // @ts-ignore\n  context === ReactReduxContext ? useStore : createStoreHook(context);\n  return function useDispatch2() {\n    const store = useStore2();\n    return store.dispatch;\n  };\n}\n\nvar useDispatch = /* @__PURE__ */createDispatchHook(); // src/exports.ts\n\nvar batch = defaultNoopBatch; // src/index.ts\n\ninitializeUseSelector(useSyncExternalStoreWithSelector2);\ninitializeConnect(React2.useSyncExternalStore);\nexport { Provider_default as Provider, ReactReduxContext, batch, connect_default as connect, createDispatchHook, createSelectorHook, createStoreHook, shallowEqual, useDispatch, useSelector, useStore };","map":{"version":3,"mappings":"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","names":["React","useSyncExternalStoreWithSelector","ReactOriginal","ContextKey","Symbol","for","gT","globalThis","getContext","createContext","contextMap","Map","realContext","get","process","env","NODE_ENV","displayName","set","ReactReduxContext","notInitialized","Error","createReduxContextHook","context","useReduxContext","contextValue","useContext","initializeUseSelector","fn","refEquality","a","b","createSelectorHook","useSelector","selector","equalityFnOrOptions","equalityFn","devModeChecks","store","subscription","getServerState","stabilityCheck","identityFunctionCheck","firstRun","useRef","wrappedSelector","useCallback","name","state","selected","finalIdentityFunctionCheck","finalStabilityCheck","current","toCompare","stack","e","console","warn","selected2","selectedState","addNestedSub","getState","useDebugValue","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_SERVER_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_OFFSCREEN_TYPE","REACT_CLIENT_REFERENCE","ForwardRef","Memo","isValidElementType","type","$$typeof","getModuleId","typeOf","object","$$typeofType","isContextConsumer","isMemo","warning","message","error","verify","methodName","Object","prototype","hasOwnProperty","call","verifySubselectors","mapStateToProps","mapDispatchToProps","mergeProps","pureFinalPropsSelectorFactory","dispatch","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","hasRunAtLeastOnce","ownProps","stateProps","dispatchProps","mergedProps","handleFirstCall","firstState","firstOwnProps","handleNewPropsAndNewState","dependsOnOwnProps","handleNewProps","handleNewState","nextStateProps","statePropsChanged","handleSubsequentCalls","nextState","nextOwnProps","propsChanged","stateChanged","pureFinalPropsSelector","finalPropsSelectorFactory","initMapStateToProps","initMapDispatchToProps","initMergeProps","options","bindActionCreators","actionCreators","boundActionCreators","key","actionCreator","isPlainObject","obj","proto","getPrototypeOf","baseProto","verifyPlainObject","value","wrapMapToPropsConstant","getConstant","initConstantSelector","constant","constantSelector","getDependsOnOwnProps","mapToProps","Boolean","length","wrapMapToPropsFunc","initProxySelector","proxy","mapToPropsProxy","stateOrDispatch","detectFactoryAndVerify","props","createInvalidArgFactory","arg","wrappedComponentName","mapDispatchToPropsFactory","mapStateToPropsFactory","defaultMergeProps","wrapMergePropsFunc","initMergePropsProxy","areMergedPropsEqual","hasRunOnce","mergePropsProxy","nextMergedProps","mergePropsFactory","defaultNoopBatch","callback","createListenerCollection","first","last","clear","notify","listener","next","listeners","push","subscribe","isSubscribed","prev","unsubscribe","nullListeners","createSubscription","parentSub","subscriptionsAmount","selfSubscribed","trySubscribe","cleanupListener","removed","tryUnsubscribe","notifyNestedSubs","handleChangeWrapper","onStateChange","trySubscribeSelf","tryUnsubscribeSelf","getListeners","canUseDOM","window","document","createElement","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","is","x","y","shallowEqual","objA","objB","keysA","keys","keysB","i","REACT_STATICS","childContextTypes","contextType","contextTypes","defaultProps","getDefaultProps","getDerivedStateFromError","getDerivedStateFromProps","mixins","propTypes","KNOWN_STATICS","caller","callee","arguments","arity","FORWARD_REF_STATICS","render","MEMO_STATICS","compare","TYPE_STATICS","getStatics","component","defineProperty","getOwnPropertyNames","getOwnPropertySymbols","getOwnPropertyDescriptor","objectPrototype","hoistNonReactStatics","targetComponent","sourceComponent","inheritedComponent","concat","targetStatics","sourceStatics","descriptor","useSyncExternalStore","initializeConnect","NO_SUBSCRIPTION_ARRAY","stringifyComponent","Comp","JSON","stringify","err","String","useIsomorphicLayoutEffectWithArgs","effectFunc","effectArgs","dependencies","captureWrapperProps","lastWrapperProps","lastChildProps","renderIsScheduled","wrapperProps","childPropsFromStoreUpdate","subscribeUpdates","shouldHandleStateChanges","childPropsSelector","isMounted","additionalSubscribeListener","didUnsubscribe","lastThrownError","checkForUpdates","latestStoreState","newChildProps","unsubscribeWrapper","strictEqual","hasWarnedAboutDeprecatedPureOption","connect","pure","forwardRef","Context","wrapWithConnect","WrappedComponent","isValid","selectorFactoryOptions","ConnectFunction","propsContext","reactReduxForwardedRef","useMemo","ContextToUse","ResultContext","Consumer","didStoreComeFromProps","didStoreComeFromContext","bind","overriddenContextValue","isProcessingDispatch","latestSubscriptionCallbackError","actualChildPropsSelector","subscribeForReact","reactListener","actualChildProps","renderedWrappedComponent","ref","renderedChild","Provider","_Connect","memo","Connect","_forwarded","forwardConnectRef","forwarded","connect_default","children","serverState","previousState","Provider_default","createStoreHook","useStore","createDispatchHook","useDispatch","batch","React2"],"sources":["G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\index.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\utils\\react.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\components\\Context.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\utils\\useSyncExternalStore.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\hooks\\useReduxContext.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\hooks\\useSelector.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\utils\\react-is.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\utils\\warning.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\connect\\verifySubselectors.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\connect\\selectorFactory.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\utils\\bindActionCreators.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\utils\\isPlainObject.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\utils\\verifyPlainObject.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\connect\\wrapMapToProps.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\connect\\invalidArgFactory.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\connect\\mapDispatchToProps.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\connect\\mapStateToProps.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\connect\\mergeProps.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\utils\\batch.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\utils\\Subscription.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\utils\\useIsomorphicLayoutEffect.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\utils\\shallowEqual.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\utils\\hoistStatics.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\components\\connect.tsx","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\components\\Provider.tsx","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\hooks\\useStore.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\hooks\\useDispatch.ts","G:\\shivan\\shoppingcartreact\\node_modules\\react-redux\\src\\exports.ts"],"sourcesContent":["// The primary entry point assumes we are working with React 18, and thus have\r\n// useSyncExternalStore available. We can import that directly from React itself.\r\n// The useSyncExternalStoreWithSelector has to be imported, but we can use the\r\n// non-shim version. This shaves off the byte size of the shim.\r\n\r\nimport * as React from 'react'\r\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector.js'\r\n\r\nimport { initializeUseSelector } from './hooks/useSelector'\r\nimport { initializeConnect } from './components/connect'\r\n\r\ninitializeUseSelector(useSyncExternalStoreWithSelector)\r\ninitializeConnect(React.useSyncExternalStore)\r\n\r\nexport * from './exports'\r\n","import * as ReactOriginal from 'react'\r\nimport type * as ReactNamespace from 'react'\r\n\r\nexport const React: typeof ReactNamespace =\r\n  // prettier-ignore\r\n  // @ts-ignore\r\n  'default' in ReactOriginal ? ReactOriginal['default'] : ReactOriginal as any\r\n","import type { Context } from 'react'\r\nimport { React } from '../utils/react'\r\nimport type { Action, Store, UnknownAction } from 'redux'\r\nimport type { Subscription } from '../utils/Subscription'\r\nimport type { ProviderProps } from './Provider'\r\n\r\nexport interface ReactReduxContextValue<\r\n  SS = any,\r\n  A extends Action<string> = UnknownAction\r\n> extends Pick<ProviderProps, 'stabilityCheck' | 'identityFunctionCheck'> {\r\n  store: Store<SS, A>\r\n  subscription: Subscription\r\n  getServerState?: () => SS\r\n}\r\n\r\nconst ContextKey = Symbol.for(`react-redux-context`)\r\nconst gT: {\r\n  [ContextKey]?: Map<\r\n    typeof React.createContext,\r\n    Context<ReactReduxContextValue | null>\r\n  >\r\n} = (\r\n  typeof globalThis !== 'undefined'\r\n    ? globalThis\r\n    : /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */ {}\r\n) as any\r\n\r\nfunction getContext(): Context<ReactReduxContextValue | null> {\r\n  if (!React.createContext) return {} as any\r\n\r\n  const contextMap = (gT[ContextKey] ??= new Map<\r\n    typeof React.createContext,\r\n    Context<ReactReduxContextValue | null>\r\n  >())\r\n  let realContext = contextMap.get(React.createContext)\r\n  if (!realContext) {\r\n    realContext = React.createContext<ReactReduxContextValue | null>(\r\n      null as any\r\n    )\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      realContext.displayName = 'ReactRedux'\r\n    }\r\n    contextMap.set(React.createContext, realContext)\r\n  }\r\n  return realContext\r\n}\r\n\r\nexport const ReactReduxContext = /*#__PURE__*/ getContext()\r\n\r\nexport type ReactReduxContextInstance = typeof ReactReduxContext\r\n\r\nexport default ReactReduxContext\r\n","import type { useSyncExternalStore } from 'use-sync-external-store'\r\nimport type { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector'\r\n\r\nexport const notInitialized = () => {\r\n  throw new Error('uSES not initialized!')\r\n}\r\n\r\nexport type uSES = typeof useSyncExternalStore\r\nexport type uSESWS = typeof useSyncExternalStoreWithSelector\r\n","import { React } from '../utils/react'\r\nimport { ReactReduxContext } from '../components/Context'\r\nimport type { ReactReduxContextValue } from '../components/Context'\r\n\r\n/**\r\n * Hook factory, which creates a `useReduxContext` hook bound to a given context. This is a low-level\r\n * hook that you should usually not need to call directly.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useReduxContext` hook bound to the specified context.\r\n */\r\nexport function createReduxContextHook(context = ReactReduxContext) {\r\n  return function useReduxContext(): ReactReduxContextValue {\r\n    const contextValue = React.useContext(context)\r\n\r\n    if (process.env.NODE_ENV !== 'production' && !contextValue) {\r\n      throw new Error(\r\n        'could not find react-redux context value; please ensure the component is wrapped in a <Provider>'\r\n      )\r\n    }\r\n\r\n    return contextValue!\r\n  }\r\n}\r\n\r\n/**\r\n * A hook to access the value of the `ReactReduxContext`. This is a low-level\r\n * hook that you should usually not need to call directly.\r\n *\r\n * @returns {any} the value of the `ReactReduxContext`\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useReduxContext } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const { store } = useReduxContext()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\r\nexport const useReduxContext = /*#__PURE__*/ createReduxContextHook()\r\n","//import * as React from 'react'\r\nimport { React } from '../utils/react'\r\n\r\nimport type { ReactReduxContextValue } from '../components/Context'\r\nimport { ReactReduxContext } from '../components/Context'\r\nimport type { EqualityFn, NoInfer } from '../types'\r\nimport type { uSESWS } from '../utils/useSyncExternalStore'\r\nimport { notInitialized } from '../utils/useSyncExternalStore'\r\nimport {\r\n  createReduxContextHook,\r\n  useReduxContext as useDefaultReduxContext,\r\n} from './useReduxContext'\r\n\r\n/**\r\n * The frequency of development mode checks.\r\n *\r\n * @since 8.1.0\r\n * @internal\r\n */\r\nexport type DevModeCheckFrequency = 'never' | 'once' | 'always'\r\n\r\n/**\r\n * Represents the configuration for development mode checks.\r\n *\r\n * @since 9.0.0\r\n * @internal\r\n */\r\nexport interface DevModeChecks {\r\n  /**\r\n   * Overrides the global stability check for the selector.\r\n   * - `once` - Run only the first time the selector is called.\r\n   * - `always` - Run every time the selector is called.\r\n   * - `never` - Never run the stability check.\r\n   *\r\n   * @default 'once'\r\n   *\r\n   * @since 8.1.0\r\n   */\r\n  stabilityCheck: DevModeCheckFrequency\r\n\r\n  /**\r\n   * Overrides the global identity function check for the selector.\r\n   * - `once` - Run only the first time the selector is called.\r\n   * - `always` - Run every time the selector is called.\r\n   * - `never` - Never run the identity function check.\r\n   *\r\n   * **Note**: Previously referred to as `noopCheck`.\r\n   *\r\n   * @default 'once'\r\n   *\r\n   * @since 9.0.0\r\n   */\r\n  identityFunctionCheck: DevModeCheckFrequency\r\n}\r\n\r\nexport interface UseSelectorOptions<Selected = unknown> {\r\n  equalityFn?: EqualityFn<Selected>\r\n\r\n  /**\r\n   * `useSelector` performs additional checks in development mode to help\r\n   * identify and warn about potential issues in selector behavior. This\r\n   * option allows you to customize the behavior of these checks per selector.\r\n   *\r\n   * @since 9.0.0\r\n   */\r\n  devModeChecks?: Partial<DevModeChecks>\r\n}\r\n\r\nexport interface UseSelector {\r\n  <TState = unknown, Selected = unknown>(\r\n    selector: (state: TState) => Selected,\r\n    equalityFn?: EqualityFn<Selected>\r\n  ): Selected\r\n  <TState = unknown, Selected = unknown>(\r\n    selector: (state: TState) => Selected,\r\n    options?: UseSelectorOptions<Selected>\r\n  ): Selected\r\n}\r\n\r\nlet useSyncExternalStoreWithSelector = notInitialized as uSESWS\r\nexport const initializeUseSelector = (fn: uSESWS) => {\r\n  useSyncExternalStoreWithSelector = fn\r\n}\r\n\r\nconst refEquality: EqualityFn<any> = (a, b) => a === b\r\n\r\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\r\nexport function createSelectorHook(\r\n  context: React.Context<ReactReduxContextValue<\r\n    any,\r\n    any\r\n  > | null> = ReactReduxContext\r\n): UseSelector {\r\n  const useReduxContext =\r\n    context === ReactReduxContext\r\n      ? useDefaultReduxContext\r\n      : createReduxContextHook(context)\r\n\r\n  return function useSelector<TState, Selected extends unknown>(\r\n    selector: (state: TState) => Selected,\r\n    equalityFnOrOptions:\r\n      | EqualityFn<NoInfer<Selected>>\r\n      | UseSelectorOptions<NoInfer<Selected>> = {}\r\n  ): Selected {\r\n    const { equalityFn = refEquality, devModeChecks = {} } =\r\n      typeof equalityFnOrOptions === 'function'\r\n        ? { equalityFn: equalityFnOrOptions }\r\n        : equalityFnOrOptions\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (!selector) {\r\n        throw new Error(`You must pass a selector to useSelector`)\r\n      }\r\n      if (typeof selector !== 'function') {\r\n        throw new Error(`You must pass a function as a selector to useSelector`)\r\n      }\r\n      if (typeof equalityFn !== 'function') {\r\n        throw new Error(\r\n          `You must pass a function as an equality function to useSelector`\r\n        )\r\n      }\r\n    }\r\n\r\n    const {\r\n      store,\r\n      subscription,\r\n      getServerState,\r\n      stabilityCheck,\r\n      identityFunctionCheck,\r\n    } = useReduxContext()\r\n\r\n    const firstRun = React.useRef(true)\r\n\r\n    const wrappedSelector = React.useCallback<typeof selector>(\r\n      {\r\n        [selector.name](state: TState) {\r\n          const selected = selector(state)\r\n          if (process.env.NODE_ENV !== 'production') {\r\n            const {\r\n              identityFunctionCheck: finalIdentityFunctionCheck,\r\n              stabilityCheck: finalStabilityCheck,\r\n            } = {\r\n              stabilityCheck,\r\n              identityFunctionCheck,\r\n              ...devModeChecks,\r\n            }\r\n            if (\r\n              finalStabilityCheck === 'always' ||\r\n              (finalStabilityCheck === 'once' && firstRun.current)\r\n            ) {\r\n              const toCompare = selector(state)\r\n              if (!equalityFn(selected, toCompare)) {\r\n                let stack: string | undefined = undefined\r\n                try {\r\n                  throw new Error()\r\n                } catch (e) {\r\n                  ;({ stack } = e as Error)\r\n                }\r\n                console.warn(\r\n                  'Selector ' +\r\n                    (selector.name || 'unknown') +\r\n                    ' returned a different result when called with the same parameters. This can lead to unnecessary rerenders.' +\r\n                    '\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization',\r\n                  {\r\n                    state,\r\n                    selected,\r\n                    selected2: toCompare,\r\n                    stack,\r\n                  }\r\n                )\r\n              }\r\n            }\r\n            if (\r\n              finalIdentityFunctionCheck === 'always' ||\r\n              (finalIdentityFunctionCheck === 'once' && firstRun.current)\r\n            ) {\r\n              // @ts-ignore\r\n              if (selected === state) {\r\n                let stack: string | undefined = undefined\r\n                try {\r\n                  throw new Error()\r\n                } catch (e) {\r\n                  ;({ stack } = e as Error)\r\n                }\r\n                console.warn(\r\n                  'Selector ' +\r\n                    (selector.name || 'unknown') +\r\n                    ' returned the root state when called. This can lead to unnecessary rerenders.' +\r\n                    '\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.',\r\n                  { stack }\r\n                )\r\n              }\r\n            }\r\n            if (firstRun.current) firstRun.current = false\r\n          }\r\n          return selected\r\n        },\r\n      }[selector.name],\r\n      [selector, stabilityCheck, devModeChecks.stabilityCheck]\r\n    )\r\n\r\n    const selectedState = useSyncExternalStoreWithSelector(\r\n      subscription.addNestedSub,\r\n      store.getState,\r\n      getServerState || store.getState,\r\n      wrappedSelector,\r\n      equalityFn\r\n    )\r\n\r\n    React.useDebugValue(selectedState)\r\n\r\n    return selectedState\r\n  }\r\n}\r\n\r\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\r\nexport const useSelector = /*#__PURE__*/ createSelectorHook()\r\n","import type { ElementType, MemoExoticComponent, ReactElement } from 'react'\r\n\r\n// Directly ported from:\r\n// https://unpkg.com/browse/react-is@18.3.0-canary-ee68446ff-20231115/cjs/react-is.production.js\r\n// It's very possible this could change in the future, but given that\r\n// we only use these in `connect`, this is a low priority.\r\n\r\nconst REACT_ELEMENT_TYPE = Symbol.for('react.element')\r\nconst REACT_PORTAL_TYPE = Symbol.for('react.portal')\r\nconst REACT_FRAGMENT_TYPE = Symbol.for('react.fragment')\r\nconst REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode')\r\nconst REACT_PROFILER_TYPE = Symbol.for('react.profiler')\r\nconst REACT_PROVIDER_TYPE = Symbol.for('react.provider')\r\nconst REACT_CONTEXT_TYPE = Symbol.for('react.context')\r\nconst REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context')\r\nconst REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref')\r\nconst REACT_SUSPENSE_TYPE = Symbol.for('react.suspense')\r\nconst REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list')\r\nconst REACT_MEMO_TYPE = Symbol.for('react.memo')\r\nconst REACT_LAZY_TYPE = Symbol.for('react.lazy')\r\nconst REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen')\r\nconst REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference')\r\n\r\nexport const ForwardRef = REACT_FORWARD_REF_TYPE\r\nexport const Memo = REACT_MEMO_TYPE\r\n\r\nexport function isValidElementType(type: any): type is ElementType {\r\n  if (typeof type === 'string' || typeof type === 'function') {\r\n    return true\r\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\r\n\r\n  if (\r\n    type === REACT_FRAGMENT_TYPE ||\r\n    type === REACT_PROFILER_TYPE ||\r\n    type === REACT_STRICT_MODE_TYPE ||\r\n    type === REACT_SUSPENSE_TYPE ||\r\n    type === REACT_SUSPENSE_LIST_TYPE ||\r\n    type === REACT_OFFSCREEN_TYPE\r\n  ) {\r\n    return true\r\n  }\r\n\r\n  if (typeof type === 'object' && type !== null) {\r\n    if (\r\n      type.$$typeof === REACT_LAZY_TYPE ||\r\n      type.$$typeof === REACT_MEMO_TYPE ||\r\n      type.$$typeof === REACT_PROVIDER_TYPE ||\r\n      type.$$typeof === REACT_CONTEXT_TYPE ||\r\n      type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\r\n      // types supported by any Flight configuration anywhere since\r\n      // we don't know which Flight build this will end up being used\r\n      // with.\r\n      type.$$typeof === REACT_CLIENT_REFERENCE ||\r\n      type.getModuleId !== undefined\r\n    ) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nfunction typeOf(object: any): symbol | undefined {\r\n  if (typeof object === 'object' && object !== null) {\r\n    const $$typeof = object.$$typeof\r\n\r\n    switch ($$typeof) {\r\n      case REACT_ELEMENT_TYPE: {\r\n        const type = object.type\r\n\r\n        switch (type) {\r\n          case REACT_FRAGMENT_TYPE:\r\n          case REACT_PROFILER_TYPE:\r\n          case REACT_STRICT_MODE_TYPE:\r\n          case REACT_SUSPENSE_TYPE:\r\n          case REACT_SUSPENSE_LIST_TYPE:\r\n            return type\r\n\r\n          default: {\r\n            const $$typeofType = type && type.$$typeof\r\n\r\n            switch ($$typeofType) {\r\n              case REACT_SERVER_CONTEXT_TYPE:\r\n              case REACT_CONTEXT_TYPE:\r\n              case REACT_FORWARD_REF_TYPE:\r\n              case REACT_LAZY_TYPE:\r\n              case REACT_MEMO_TYPE:\r\n              case REACT_PROVIDER_TYPE:\r\n                return $$typeofType\r\n\r\n              default:\r\n                return $$typeof\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      case REACT_PORTAL_TYPE: {\r\n        return $$typeof\r\n      }\r\n    }\r\n  }\r\n\r\n  return undefined\r\n}\r\n\r\nexport function isContextConsumer(object: any): object is ReactElement {\r\n  return typeOf(object) === REACT_CONTEXT_TYPE\r\n}\r\n\r\nexport function isMemo(object: any): object is MemoExoticComponent<any> {\r\n  return typeOf(object) === REACT_MEMO_TYPE\r\n}\r\n","/**\r\n * Prints a warning in the console if it exists.\r\n *\r\n * @param {String} message The warning message.\r\n * @returns {void}\r\n */\r\nexport default function warning(message: string) {\r\n  /* eslint-disable no-console */\r\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\r\n    console.error(message)\r\n  }\r\n  /* eslint-enable no-console */\r\n  try {\r\n    // This error was thrown as a convenience so that if you enable\r\n    // \"break on all exceptions\" in your console,\r\n    // it would pause the execution at this line.\r\n    throw new Error(message)\r\n    /* eslint-disable no-empty */\r\n  } catch (e) {}\r\n  /* eslint-enable no-empty */\r\n}\r\n","import warning from '../utils/warning'\r\n\r\nfunction verify(selector: unknown, methodName: string): void {\r\n  if (!selector) {\r\n    throw new Error(`Unexpected value for ${methodName} in connect.`)\r\n  } else if (\r\n    methodName === 'mapStateToProps' ||\r\n    methodName === 'mapDispatchToProps'\r\n  ) {\r\n    if (!Object.prototype.hasOwnProperty.call(selector, 'dependsOnOwnProps')) {\r\n      warning(\r\n        `The selector for ${methodName} of connect did not specify a value for dependsOnOwnProps.`\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default function verifySubselectors(\r\n  mapStateToProps: unknown,\r\n  mapDispatchToProps: unknown,\r\n  mergeProps: unknown\r\n): void {\r\n  verify(mapStateToProps, 'mapStateToProps')\r\n  verify(mapDispatchToProps, 'mapDispatchToProps')\r\n  verify(mergeProps, 'mergeProps')\r\n}\r\n","import type { Dispatch, Action } from 'redux'\r\nimport type { ComponentType } from 'react'\r\nimport verifySubselectors from './verifySubselectors'\r\nimport type { EqualityFn, ExtendedEqualityFn } from '../types'\r\n\r\nexport type SelectorFactory<S, TProps, TOwnProps, TFactoryOptions> = (\r\n  dispatch: Dispatch<Action<string>>,\r\n  factoryOptions: TFactoryOptions\r\n) => Selector<S, TProps, TOwnProps>\r\n\r\nexport type Selector<S, TProps, TOwnProps = null> = TOwnProps extends\r\n  | null\r\n  | undefined\r\n  ? (state: S) => TProps\r\n  : (state: S, ownProps: TOwnProps) => TProps\r\n\r\nexport type MapStateToProps<TStateProps, TOwnProps, State> = (\r\n  state: State,\r\n  ownProps: TOwnProps\r\n) => TStateProps\r\n\r\nexport type MapStateToPropsFactory<TStateProps, TOwnProps, State> = (\r\n  initialState: State,\r\n  ownProps: TOwnProps\r\n) => MapStateToProps<TStateProps, TOwnProps, State>\r\n\r\nexport type MapStateToPropsParam<TStateProps, TOwnProps, State> =\r\n  | MapStateToPropsFactory<TStateProps, TOwnProps, State>\r\n  | MapStateToProps<TStateProps, TOwnProps, State>\r\n  | null\r\n  | undefined\r\n\r\nexport type MapDispatchToPropsFunction<TDispatchProps, TOwnProps> = (\r\n  dispatch: Dispatch<Action<string>>,\r\n  ownProps: TOwnProps\r\n) => TDispatchProps\r\n\r\nexport type MapDispatchToProps<TDispatchProps, TOwnProps> =\r\n  | MapDispatchToPropsFunction<TDispatchProps, TOwnProps>\r\n  | TDispatchProps\r\n\r\nexport type MapDispatchToPropsFactory<TDispatchProps, TOwnProps> = (\r\n  dispatch: Dispatch<Action<string>>,\r\n  ownProps: TOwnProps\r\n) => MapDispatchToPropsFunction<TDispatchProps, TOwnProps>\r\n\r\nexport type MapDispatchToPropsParam<TDispatchProps, TOwnProps> =\r\n  | MapDispatchToPropsFactory<TDispatchProps, TOwnProps>\r\n  | MapDispatchToProps<TDispatchProps, TOwnProps>\r\n\r\nexport type MapDispatchToPropsNonObject<TDispatchProps, TOwnProps> =\r\n  | MapDispatchToPropsFactory<TDispatchProps, TOwnProps>\r\n  | MapDispatchToPropsFunction<TDispatchProps, TOwnProps>\r\n\r\nexport type MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps> = (\r\n  stateProps: TStateProps,\r\n  dispatchProps: TDispatchProps,\r\n  ownProps: TOwnProps\r\n) => TMergedProps\r\n\r\ninterface PureSelectorFactoryComparisonOptions<TStateProps, TOwnProps, State> {\r\n  readonly areStatesEqual: ExtendedEqualityFn<State, TOwnProps>\r\n  readonly areStatePropsEqual: EqualityFn<TStateProps>\r\n  readonly areOwnPropsEqual: EqualityFn<TOwnProps>\r\n}\r\n\r\nexport function pureFinalPropsSelectorFactory<\r\n  TStateProps,\r\n  TOwnProps,\r\n  TDispatchProps,\r\n  TMergedProps,\r\n  State\r\n>(\r\n  mapStateToProps: WrappedMapStateToProps<TStateProps, TOwnProps, State>,\r\n  mapDispatchToProps: WrappedMapDispatchToProps<TDispatchProps, TOwnProps>,\r\n  mergeProps: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>,\r\n  dispatch: Dispatch<Action<string>>,\r\n  {\r\n    areStatesEqual,\r\n    areOwnPropsEqual,\r\n    areStatePropsEqual,\r\n  }: PureSelectorFactoryComparisonOptions<TStateProps, TOwnProps, State>\r\n) {\r\n  let hasRunAtLeastOnce = false\r\n  let state: State\r\n  let ownProps: TOwnProps\r\n  let stateProps: TStateProps\r\n  let dispatchProps: TDispatchProps\r\n  let mergedProps: TMergedProps\r\n\r\n  function handleFirstCall(firstState: State, firstOwnProps: TOwnProps) {\r\n    state = firstState\r\n    ownProps = firstOwnProps\r\n    stateProps = mapStateToProps(state, ownProps)\r\n    dispatchProps = mapDispatchToProps(dispatch, ownProps)\r\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\r\n    hasRunAtLeastOnce = true\r\n    return mergedProps\r\n  }\r\n\r\n  function handleNewPropsAndNewState() {\r\n    stateProps = mapStateToProps(state, ownProps)\r\n\r\n    if (mapDispatchToProps.dependsOnOwnProps)\r\n      dispatchProps = mapDispatchToProps(dispatch, ownProps)\r\n\r\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\r\n    return mergedProps\r\n  }\r\n\r\n  function handleNewProps() {\r\n    if (mapStateToProps.dependsOnOwnProps)\r\n      stateProps = mapStateToProps(state, ownProps)\r\n\r\n    if (mapDispatchToProps.dependsOnOwnProps)\r\n      dispatchProps = mapDispatchToProps(dispatch, ownProps)\r\n\r\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\r\n    return mergedProps\r\n  }\r\n\r\n  function handleNewState() {\r\n    const nextStateProps = mapStateToProps(state, ownProps)\r\n    const statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps)\r\n    stateProps = nextStateProps\r\n\r\n    if (statePropsChanged)\r\n      mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\r\n\r\n    return mergedProps\r\n  }\r\n\r\n  function handleSubsequentCalls(nextState: State, nextOwnProps: TOwnProps) {\r\n    const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps)\r\n    const stateChanged = !areStatesEqual(\r\n      nextState,\r\n      state,\r\n      nextOwnProps,\r\n      ownProps\r\n    )\r\n    state = nextState\r\n    ownProps = nextOwnProps\r\n\r\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState()\r\n    if (propsChanged) return handleNewProps()\r\n    if (stateChanged) return handleNewState()\r\n    return mergedProps\r\n  }\r\n\r\n  return function pureFinalPropsSelector(\r\n    nextState: State,\r\n    nextOwnProps: TOwnProps\r\n  ) {\r\n    return hasRunAtLeastOnce\r\n      ? handleSubsequentCalls(nextState, nextOwnProps)\r\n      : handleFirstCall(nextState, nextOwnProps)\r\n  }\r\n}\r\n\r\ninterface WrappedMapStateToProps<TStateProps, TOwnProps, State> {\r\n  (state: State, ownProps: TOwnProps): TStateProps\r\n  readonly dependsOnOwnProps: boolean\r\n}\r\n\r\ninterface WrappedMapDispatchToProps<TDispatchProps, TOwnProps> {\r\n  (dispatch: Dispatch<Action<string>>, ownProps: TOwnProps): TDispatchProps\r\n  readonly dependsOnOwnProps: boolean\r\n}\r\n\r\nexport interface InitOptions<TStateProps, TOwnProps, TMergedProps, State>\r\n  extends PureSelectorFactoryComparisonOptions<TStateProps, TOwnProps, State> {\r\n  readonly shouldHandleStateChanges: boolean\r\n  readonly displayName: string\r\n  readonly wrappedComponentName: string\r\n  readonly WrappedComponent: ComponentType<TOwnProps>\r\n  readonly areMergedPropsEqual: EqualityFn<TMergedProps>\r\n}\r\n\r\nexport interface SelectorFactoryOptions<\r\n  TStateProps,\r\n  TOwnProps,\r\n  TDispatchProps,\r\n  TMergedProps,\r\n  State\r\n> extends InitOptions<TStateProps, TOwnProps, TMergedProps, State> {\r\n  readonly initMapStateToProps: (\r\n    dispatch: Dispatch<Action<string>>,\r\n    options: InitOptions<TStateProps, TOwnProps, TMergedProps, State>\r\n  ) => WrappedMapStateToProps<TStateProps, TOwnProps, State>\r\n  readonly initMapDispatchToProps: (\r\n    dispatch: Dispatch<Action<string>>,\r\n    options: InitOptions<TStateProps, TOwnProps, TMergedProps, State>\r\n  ) => WrappedMapDispatchToProps<TDispatchProps, TOwnProps>\r\n  readonly initMergeProps: (\r\n    dispatch: Dispatch<Action<string>>,\r\n    options: InitOptions<TStateProps, TOwnProps, TMergedProps, State>\r\n  ) => MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>\r\n}\r\n\r\n// TODO: Add more comments\r\n\r\n// The selector returned by selectorFactory will memoize its results,\r\n// allowing connect's shouldComponentUpdate to return false if final\r\n// props have not changed.\r\n\r\nexport default function finalPropsSelectorFactory<\r\n  TStateProps,\r\n  TOwnProps,\r\n  TDispatchProps,\r\n  TMergedProps,\r\n  State\r\n>(\r\n  dispatch: Dispatch<Action<string>>,\r\n  {\r\n    initMapStateToProps,\r\n    initMapDispatchToProps,\r\n    initMergeProps,\r\n    ...options\r\n  }: SelectorFactoryOptions<\r\n    TStateProps,\r\n    TOwnProps,\r\n    TDispatchProps,\r\n    TMergedProps,\r\n    State\r\n  >\r\n) {\r\n  const mapStateToProps = initMapStateToProps(dispatch, options)\r\n  const mapDispatchToProps = initMapDispatchToProps(dispatch, options)\r\n  const mergeProps = initMergeProps(dispatch, options)\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps)\r\n  }\r\n\r\n  return pureFinalPropsSelectorFactory<\r\n    TStateProps,\r\n    TOwnProps,\r\n    TDispatchProps,\r\n    TMergedProps,\r\n    State\r\n  >(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options)\r\n}\r\n","import type { ActionCreatorsMapObject, Dispatch } from 'redux'\r\n\r\nexport default function bindActionCreators(\r\n  actionCreators: ActionCreatorsMapObject,\r\n  dispatch: Dispatch\r\n): ActionCreatorsMapObject {\r\n  const boundActionCreators: ActionCreatorsMapObject = {}\r\n\r\n  for (const key in actionCreators) {\r\n    const actionCreator = actionCreators[key]\r\n    if (typeof actionCreator === 'function') {\r\n      boundActionCreators[key] = (...args) => dispatch(actionCreator(...args))\r\n    }\r\n  }\r\n  return boundActionCreators\r\n}\r\n","/**\r\n * @param {any} obj The object to inspect.\r\n * @returns {boolean} True if the argument appears to be a plain object.\r\n */\r\nexport default function isPlainObject(obj: unknown) {\r\n  if (typeof obj !== 'object' || obj === null) return false\r\n\r\n  let proto = Object.getPrototypeOf(obj)\r\n  if (proto === null) return true\r\n\r\n  let baseProto = proto\r\n  while (Object.getPrototypeOf(baseProto) !== null) {\r\n    baseProto = Object.getPrototypeOf(baseProto)\r\n  }\r\n\r\n  return proto === baseProto\r\n}\r\n","import isPlainObject from './isPlainObject'\r\nimport warning from './warning'\r\n\r\nexport default function verifyPlainObject(\r\n  value: unknown,\r\n  displayName: string,\r\n  methodName: string\r\n) {\r\n  if (!isPlainObject(value)) {\r\n    warning(\r\n      `${methodName}() in ${displayName} must return a plain object. Instead received ${value}.`\r\n    )\r\n  }\r\n}\r\n","import type { ActionCreatorsMapObject, Dispatch, ActionCreator } from 'redux'\r\n\r\nimport type { FixTypeLater } from '../types'\r\nimport verifyPlainObject from '../utils/verifyPlainObject'\r\n\r\ntype AnyState = { [key: string]: any }\r\ntype StateOrDispatch<S extends AnyState = AnyState> = S | Dispatch\r\n\r\ntype AnyProps = { [key: string]: any }\r\n\r\nexport type MapToProps<P extends AnyProps = AnyProps> = {\r\n  // eslint-disable-next-line no-unused-vars\r\n  (stateOrDispatch: StateOrDispatch, ownProps?: P): FixTypeLater\r\n  dependsOnOwnProps?: boolean\r\n}\r\n\r\nexport function wrapMapToPropsConstant(\r\n  // * Note:\r\n  //  It seems that the dispatch argument\r\n  //  could be a dispatch function in some cases (ex: whenMapDispatchToPropsIsMissing)\r\n  //  and a state object in some others (ex: whenMapStateToPropsIsMissing)\r\n  // eslint-disable-next-line no-unused-vars\r\n  getConstant: (dispatch: Dispatch) =>\r\n    | {\r\n        dispatch?: Dispatch\r\n        dependsOnOwnProps?: boolean\r\n      }\r\n    | ActionCreatorsMapObject\r\n    | ActionCreator<any>\r\n) {\r\n  return function initConstantSelector(dispatch: Dispatch) {\r\n    const constant = getConstant(dispatch)\r\n\r\n    function constantSelector() {\r\n      return constant\r\n    }\r\n    constantSelector.dependsOnOwnProps = false\r\n    return constantSelector\r\n  }\r\n}\r\n\r\n// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args\r\n// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine\r\n// whether mapToProps needs to be invoked when props have changed.\r\n//\r\n// A length of one signals that mapToProps does not depend on props from the parent component.\r\n// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and\r\n// therefore not reporting its length accurately..\r\n// TODO Can this get pulled out so that we can subscribe directly to the store if we don't need ownProps?\r\nexport function getDependsOnOwnProps(mapToProps: MapToProps) {\r\n  return mapToProps.dependsOnOwnProps\r\n    ? Boolean(mapToProps.dependsOnOwnProps)\r\n    : mapToProps.length !== 1\r\n}\r\n\r\n// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,\r\n// this function wraps mapToProps in a proxy function which does several things:\r\n//\r\n//  * Detects whether the mapToProps function being called depends on props, which\r\n//    is used by selectorFactory to decide if it should reinvoke on props changes.\r\n//\r\n//  * On first call, handles mapToProps if returns another function, and treats that\r\n//    new function as the true mapToProps for subsequent calls.\r\n//\r\n//  * On first call, verifies the first result is a plain object, in order to warn\r\n//    the developer that their mapToProps function is not returning a valid result.\r\n//\r\nexport function wrapMapToPropsFunc<P extends AnyProps = AnyProps>(\r\n  mapToProps: MapToProps,\r\n  methodName: string\r\n) {\r\n  return function initProxySelector(\r\n    dispatch: Dispatch,\r\n    { displayName }: { displayName: string }\r\n  ) {\r\n    const proxy = function mapToPropsProxy(\r\n      stateOrDispatch: StateOrDispatch,\r\n      ownProps?: P\r\n    ): MapToProps {\r\n      return proxy.dependsOnOwnProps\r\n        ? proxy.mapToProps(stateOrDispatch, ownProps)\r\n        : proxy.mapToProps(stateOrDispatch, undefined)\r\n    }\r\n\r\n    // allow detectFactoryAndVerify to get ownProps\r\n    proxy.dependsOnOwnProps = true\r\n\r\n    proxy.mapToProps = function detectFactoryAndVerify(\r\n      stateOrDispatch: StateOrDispatch,\r\n      ownProps?: P\r\n    ): MapToProps {\r\n      proxy.mapToProps = mapToProps\r\n      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps)\r\n      let props = proxy(stateOrDispatch, ownProps)\r\n\r\n      if (typeof props === 'function') {\r\n        proxy.mapToProps = props\r\n        proxy.dependsOnOwnProps = getDependsOnOwnProps(props)\r\n        props = proxy(stateOrDispatch, ownProps)\r\n      }\r\n\r\n      if (process.env.NODE_ENV !== 'production')\r\n        verifyPlainObject(props, displayName, methodName)\r\n\r\n      return props\r\n    }\r\n\r\n    return proxy\r\n  }\r\n}\r\n","import type { Action, Dispatch } from 'redux'\r\n\r\nexport function createInvalidArgFactory(arg: unknown, name: string) {\r\n  return (\r\n    dispatch: Dispatch<Action<string>>,\r\n    options: { readonly wrappedComponentName: string }\r\n  ) => {\r\n    throw new Error(\r\n      `Invalid value of type ${typeof arg} for ${name} argument when connecting component ${\r\n        options.wrappedComponentName\r\n      }.`\r\n    )\r\n  }\r\n}\r\n","import type { Action, Dispatch } from 'redux'\r\nimport bindActionCreators from '../utils/bindActionCreators'\r\nimport { wrapMapToPropsConstant, wrapMapToPropsFunc } from './wrapMapToProps'\r\nimport { createInvalidArgFactory } from './invalidArgFactory'\r\nimport type { MapDispatchToPropsParam } from './selectorFactory'\r\n\r\nexport function mapDispatchToPropsFactory<TDispatchProps, TOwnProps>(\r\n  mapDispatchToProps:\r\n    | MapDispatchToPropsParam<TDispatchProps, TOwnProps>\r\n    | undefined\r\n) {\r\n  return mapDispatchToProps && typeof mapDispatchToProps === 'object'\r\n    ? wrapMapToPropsConstant((dispatch: Dispatch<Action<string>>) =>\r\n        // @ts-ignore\r\n        bindActionCreators(mapDispatchToProps, dispatch)\r\n      )\r\n    : !mapDispatchToProps\r\n    ? wrapMapToPropsConstant((dispatch: Dispatch<Action<string>>) => ({\r\n        dispatch,\r\n      }))\r\n    : typeof mapDispatchToProps === 'function'\r\n    ? // @ts-ignore\r\n      wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps')\r\n    : createInvalidArgFactory(mapDispatchToProps, 'mapDispatchToProps')\r\n}\r\n","import { wrapMapToPropsConstant, wrapMapToPropsFunc } from './wrapMapToProps'\r\nimport { createInvalidArgFactory } from './invalidArgFactory'\r\nimport type { MapStateToPropsParam } from './selectorFactory'\r\n\r\nexport function mapStateToPropsFactory<TStateProps, TOwnProps, State>(\r\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>\r\n) {\r\n  return !mapStateToProps\r\n    ? wrapMapToPropsConstant(() => ({}))\r\n    : typeof mapStateToProps === 'function'\r\n    ? // @ts-ignore\r\n      wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps')\r\n    : createInvalidArgFactory(mapStateToProps, 'mapStateToProps')\r\n}\r\n","import type { Action, Dispatch } from 'redux'\r\nimport verifyPlainObject from '../utils/verifyPlainObject'\r\nimport { createInvalidArgFactory } from './invalidArgFactory'\r\nimport type { MergeProps } from './selectorFactory'\r\nimport type { EqualityFn } from '../types'\r\n\r\nexport function defaultMergeProps<\r\n  TStateProps,\r\n  TDispatchProps,\r\n  TOwnProps,\r\n  TMergedProps\r\n>(\r\n  stateProps: TStateProps,\r\n  dispatchProps: TDispatchProps,\r\n  ownProps: TOwnProps\r\n): TMergedProps {\r\n  // @ts-ignore\r\n  return { ...ownProps, ...stateProps, ...dispatchProps }\r\n}\r\n\r\nexport function wrapMergePropsFunc<\r\n  TStateProps,\r\n  TDispatchProps,\r\n  TOwnProps,\r\n  TMergedProps\r\n>(\r\n  mergeProps: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>\r\n): (\r\n  dispatch: Dispatch<Action<string>>,\r\n  options: {\r\n    readonly displayName: string\r\n    readonly areMergedPropsEqual: EqualityFn<TMergedProps>\r\n  }\r\n) => MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps> {\r\n  return function initMergePropsProxy(\r\n    dispatch,\r\n    { displayName, areMergedPropsEqual }\r\n  ) {\r\n    let hasRunOnce = false\r\n    let mergedProps: TMergedProps\r\n\r\n    return function mergePropsProxy(\r\n      stateProps: TStateProps,\r\n      dispatchProps: TDispatchProps,\r\n      ownProps: TOwnProps\r\n    ) {\r\n      const nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps)\r\n\r\n      if (hasRunOnce) {\r\n        if (!areMergedPropsEqual(nextMergedProps, mergedProps))\r\n          mergedProps = nextMergedProps\r\n      } else {\r\n        hasRunOnce = true\r\n        mergedProps = nextMergedProps\r\n\r\n        if (process.env.NODE_ENV !== 'production')\r\n          verifyPlainObject(mergedProps, displayName, 'mergeProps')\r\n      }\r\n\r\n      return mergedProps\r\n    }\r\n  }\r\n}\r\n\r\nexport function mergePropsFactory<\r\n  TStateProps,\r\n  TDispatchProps,\r\n  TOwnProps,\r\n  TMergedProps\r\n>(\r\n  mergeProps?: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>\r\n) {\r\n  return !mergeProps\r\n    ? () => defaultMergeProps\r\n    : typeof mergeProps === 'function'\r\n    ? wrapMergePropsFunc(mergeProps)\r\n    : createInvalidArgFactory(mergeProps, 'mergeProps')\r\n}\r\n","// Default to a dummy \"batch\" implementation that just runs the callback\r\nexport function defaultNoopBatch(callback: () => void) {\r\n  callback()\r\n}\r\n","import { defaultNoopBatch as batch } from './batch'\r\n\r\n// encapsulates the subscription logic for connecting a component to the redux store, as\r\n// well as nesting subscriptions of descendant components, so that we can ensure the\r\n// ancestor components re-render before descendants\r\n\r\ntype VoidFunc = () => void\r\n\r\ntype Listener = {\r\n  callback: VoidFunc\r\n  next: Listener | null\r\n  prev: Listener | null\r\n}\r\n\r\nfunction createListenerCollection() {\r\n  let first: Listener | null = null\r\n  let last: Listener | null = null\r\n\r\n  return {\r\n    clear() {\r\n      first = null\r\n      last = null\r\n    },\r\n\r\n    notify() {\r\n      batch(() => {\r\n        let listener = first\r\n        while (listener) {\r\n          listener.callback()\r\n          listener = listener.next\r\n        }\r\n      })\r\n    },\r\n\r\n    get() {\r\n      let listeners: Listener[] = []\r\n      let listener = first\r\n      while (listener) {\r\n        listeners.push(listener)\r\n        listener = listener.next\r\n      }\r\n      return listeners\r\n    },\r\n\r\n    subscribe(callback: () => void) {\r\n      let isSubscribed = true\r\n\r\n      let listener: Listener = (last = {\r\n        callback,\r\n        next: null,\r\n        prev: last,\r\n      })\r\n\r\n      if (listener.prev) {\r\n        listener.prev.next = listener\r\n      } else {\r\n        first = listener\r\n      }\r\n\r\n      return function unsubscribe() {\r\n        if (!isSubscribed || first === null) return\r\n        isSubscribed = false\r\n\r\n        if (listener.next) {\r\n          listener.next.prev = listener.prev\r\n        } else {\r\n          last = listener.prev\r\n        }\r\n        if (listener.prev) {\r\n          listener.prev.next = listener.next\r\n        } else {\r\n          first = listener.next\r\n        }\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\ntype ListenerCollection = ReturnType<typeof createListenerCollection>\r\n\r\nexport interface Subscription {\r\n  addNestedSub: (listener: VoidFunc) => VoidFunc\r\n  notifyNestedSubs: VoidFunc\r\n  handleChangeWrapper: VoidFunc\r\n  isSubscribed: () => boolean\r\n  onStateChange?: VoidFunc | null\r\n  trySubscribe: VoidFunc\r\n  tryUnsubscribe: VoidFunc\r\n  getListeners: () => ListenerCollection\r\n}\r\n\r\nconst nullListeners = {\r\n  notify() {},\r\n  get: () => [],\r\n} as unknown as ListenerCollection\r\n\r\nexport function createSubscription(store: any, parentSub?: Subscription) {\r\n  let unsubscribe: VoidFunc | undefined\r\n  let listeners: ListenerCollection = nullListeners\r\n\r\n  // Reasons to keep the subscription active\r\n  let subscriptionsAmount = 0\r\n\r\n  // Is this specific subscription subscribed (or only nested ones?)\r\n  let selfSubscribed = false\r\n\r\n  function addNestedSub(listener: () => void) {\r\n    trySubscribe()\r\n\r\n    const cleanupListener = listeners.subscribe(listener)\r\n\r\n    // cleanup nested sub\r\n    let removed = false\r\n    return () => {\r\n      if (!removed) {\r\n        removed = true\r\n        cleanupListener()\r\n        tryUnsubscribe()\r\n      }\r\n    }\r\n  }\r\n\r\n  function notifyNestedSubs() {\r\n    listeners.notify()\r\n  }\r\n\r\n  function handleChangeWrapper() {\r\n    if (subscription.onStateChange) {\r\n      subscription.onStateChange()\r\n    }\r\n  }\r\n\r\n  function isSubscribed() {\r\n    return selfSubscribed\r\n  }\r\n\r\n  function trySubscribe() {\r\n    subscriptionsAmount++\r\n    if (!unsubscribe) {\r\n      unsubscribe = parentSub\r\n        ? parentSub.addNestedSub(handleChangeWrapper)\r\n        : store.subscribe(handleChangeWrapper)\r\n\r\n      listeners = createListenerCollection()\r\n    }\r\n  }\r\n\r\n  function tryUnsubscribe() {\r\n    subscriptionsAmount--\r\n    if (unsubscribe && subscriptionsAmount === 0) {\r\n      unsubscribe()\r\n      unsubscribe = undefined\r\n      listeners.clear()\r\n      listeners = nullListeners\r\n    }\r\n  }\r\n\r\n  function trySubscribeSelf() {\r\n    if (!selfSubscribed) {\r\n      selfSubscribed = true\r\n      trySubscribe()\r\n    }\r\n  }\r\n\r\n  function tryUnsubscribeSelf() {\r\n    if (selfSubscribed) {\r\n      selfSubscribed = false\r\n      tryUnsubscribe()\r\n    }\r\n  }\r\n\r\n  const subscription: Subscription = {\r\n    addNestedSub,\r\n    notifyNestedSubs,\r\n    handleChangeWrapper,\r\n    isSubscribed,\r\n    trySubscribe: trySubscribeSelf,\r\n    tryUnsubscribe: tryUnsubscribeSelf,\r\n    getListeners: () => listeners,\r\n  }\r\n\r\n  return subscription\r\n}\r\n","import { React } from '../utils/react'\r\n\r\n// React currently throws a warning when using useLayoutEffect on the server.\r\n// To get around it, we can conditionally useEffect on the server (no-op) and\r\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\r\n// subscription callback always has the selector from the latest render commit\r\n// available, otherwise a store update may happen between render and the effect,\r\n// which may cause missed updates; we also must ensure the store subscription\r\n// is created synchronously, otherwise a store update may occur before the\r\n// subscription is created and an inconsistent state may be observed\r\n\r\n// Matches logic in React's `shared/ExecutionEnvironment` file\r\nexport const canUseDOM = !!(\r\n  typeof window !== 'undefined' &&\r\n  typeof window.document !== 'undefined' &&\r\n  typeof window.document.createElement !== 'undefined'\r\n)\r\n\r\nexport const useIsomorphicLayoutEffect = canUseDOM\r\n  ? React.useLayoutEffect\r\n  : React.useEffect\r\n","function is(x: unknown, y: unknown) {\r\n  if (x === y) {\r\n    return x !== 0 || y !== 0 || 1 / x === 1 / y\r\n  } else {\r\n    return x !== x && y !== y\r\n  }\r\n}\r\n\r\nexport default function shallowEqual(objA: any, objB: any) {\r\n  if (is(objA, objB)) return true\r\n\r\n  if (\r\n    typeof objA !== 'object' ||\r\n    objA === null ||\r\n    typeof objB !== 'object' ||\r\n    objB === null\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  const keysA = Object.keys(objA)\r\n  const keysB = Object.keys(objB)\r\n\r\n  if (keysA.length !== keysB.length) return false\r\n\r\n  for (let i = 0; i < keysA.length; i++) {\r\n    if (\r\n      !Object.prototype.hasOwnProperty.call(objB, keysA[i]) ||\r\n      !is(objA[keysA[i]], objB[keysA[i]])\r\n    ) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n","// Copied directly from:\r\n// https://github.com/mridgway/hoist-non-react-statics/blob/main/src/index.js\r\n// https://unpkg.com/browse/@types/hoist-non-react-statics@3.3.1/index.d.ts\r\n\r\n/**\r\n * Copyright 2015, Yahoo! Inc.\r\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\r\n */\r\nimport type * as React from 'react'\r\nimport { ForwardRef, Memo, isMemo } from '../utils/react-is'\r\n\r\nconst REACT_STATICS = {\r\n  childContextTypes: true,\r\n  contextType: true,\r\n  contextTypes: true,\r\n  defaultProps: true,\r\n  displayName: true,\r\n  getDefaultProps: true,\r\n  getDerivedStateFromError: true,\r\n  getDerivedStateFromProps: true,\r\n  mixins: true,\r\n  propTypes: true,\r\n  type: true,\r\n} as const\r\n\r\nconst KNOWN_STATICS = {\r\n  name: true,\r\n  length: true,\r\n  prototype: true,\r\n  caller: true,\r\n  callee: true,\r\n  arguments: true,\r\n  arity: true,\r\n} as const\r\n\r\nconst FORWARD_REF_STATICS = {\r\n  $$typeof: true,\r\n  render: true,\r\n  defaultProps: true,\r\n  displayName: true,\r\n  propTypes: true,\r\n} as const\r\n\r\nconst MEMO_STATICS = {\r\n  $$typeof: true,\r\n  compare: true,\r\n  defaultProps: true,\r\n  displayName: true,\r\n  propTypes: true,\r\n  type: true,\r\n} as const\r\n\r\nconst TYPE_STATICS = {\r\n  [ForwardRef]: FORWARD_REF_STATICS,\r\n  [Memo]: MEMO_STATICS,\r\n} as const\r\n\r\nfunction getStatics(component: any) {\r\n  // React v16.11 and below\r\n  if (isMemo(component)) {\r\n    return MEMO_STATICS\r\n  }\r\n\r\n  // React v16.12 and above\r\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS\r\n}\r\n\r\nexport type NonReactStatics<\r\n  S extends React.ComponentType<any>,\r\n  C extends {\r\n    [key: string]: true\r\n  } = {}\r\n> = {\r\n  [key in Exclude<\r\n    keyof S,\r\n    S extends React.MemoExoticComponent<any>\r\n      ? keyof typeof MEMO_STATICS | keyof C\r\n      : S extends React.ForwardRefExoticComponent<any>\r\n      ? keyof typeof FORWARD_REF_STATICS | keyof C\r\n      : keyof typeof REACT_STATICS | keyof typeof KNOWN_STATICS | keyof C\r\n  >]: S[key]\r\n}\r\n\r\nconst defineProperty = Object.defineProperty\r\nconst getOwnPropertyNames = Object.getOwnPropertyNames\r\nconst getOwnPropertySymbols = Object.getOwnPropertySymbols\r\nconst getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor\r\nconst getPrototypeOf = Object.getPrototypeOf\r\nconst objectPrototype = Object.prototype\r\n\r\nexport default function hoistNonReactStatics<\r\n  T extends React.ComponentType<any>,\r\n  S extends React.ComponentType<any>,\r\n  C extends {\r\n    [key: string]: true\r\n  } = {}\r\n>(targetComponent: T, sourceComponent: S): T & NonReactStatics<S, C> {\r\n  if (typeof sourceComponent !== 'string') {\r\n    // don't hoist over string (html) components\r\n\r\n    if (objectPrototype) {\r\n      const inheritedComponent = getPrototypeOf(sourceComponent)\r\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\r\n        hoistNonReactStatics(targetComponent, inheritedComponent)\r\n      }\r\n    }\r\n\r\n    let keys: (string | symbol)[] = getOwnPropertyNames(sourceComponent)\r\n\r\n    if (getOwnPropertySymbols) {\r\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent))\r\n    }\r\n\r\n    const targetStatics = getStatics(targetComponent)\r\n    const sourceStatics = getStatics(sourceComponent)\r\n\r\n    for (let i = 0; i < keys.length; ++i) {\r\n      const key = keys[i]\r\n      if (\r\n        !KNOWN_STATICS[key as keyof typeof KNOWN_STATICS] &&\r\n        !(sourceStatics && sourceStatics[key as keyof typeof sourceStatics]) &&\r\n        !(targetStatics && targetStatics[key as keyof typeof targetStatics])\r\n      ) {\r\n        const descriptor = getOwnPropertyDescriptor(sourceComponent, key)\r\n        try {\r\n          // Avoid failures from read-only properties\r\n          defineProperty(targetComponent, key, descriptor!)\r\n        } catch (e) {\r\n          // ignore\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return targetComponent as any\r\n}\r\n","/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */\r\nimport type { ComponentType } from 'react'\r\nimport { React } from '../utils/react'\r\nimport { isValidElementType, isContextConsumer } from '../utils/react-is'\r\n\r\nimport type { Store } from 'redux'\r\n\r\nimport type {\r\n  ConnectedComponent,\r\n  InferableComponentEnhancer,\r\n  InferableComponentEnhancerWithProps,\r\n  ResolveThunks,\r\n  DispatchProp,\r\n  ConnectPropsMaybeWithoutContext,\r\n} from '../types'\r\n\r\nimport type {\r\n  MapStateToPropsParam,\r\n  MapDispatchToPropsParam,\r\n  MergeProps,\r\n  MapDispatchToPropsNonObject,\r\n  SelectorFactoryOptions,\r\n} from '../connect/selectorFactory'\r\nimport defaultSelectorFactory from '../connect/selectorFactory'\r\nimport { mapDispatchToPropsFactory } from '../connect/mapDispatchToProps'\r\nimport { mapStateToPropsFactory } from '../connect/mapStateToProps'\r\nimport { mergePropsFactory } from '../connect/mergeProps'\r\n\r\nimport type { Subscription } from '../utils/Subscription'\r\nimport { createSubscription } from '../utils/Subscription'\r\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect'\r\nimport shallowEqual from '../utils/shallowEqual'\r\nimport hoistStatics from '../utils/hoistStatics'\r\nimport warning from '../utils/warning'\r\n\r\nimport type {\r\n  ReactReduxContextValue,\r\n  ReactReduxContextInstance,\r\n} from './Context'\r\nimport { ReactReduxContext } from './Context'\r\n\r\nimport type { uSES } from '../utils/useSyncExternalStore'\r\nimport { notInitialized } from '../utils/useSyncExternalStore'\r\n\r\nlet useSyncExternalStore = notInitialized as uSES\r\nexport const initializeConnect = (fn: uSES) => {\r\n  useSyncExternalStore = fn\r\n}\r\n\r\n// Define some constant arrays just to avoid re-creating these\r\nconst EMPTY_ARRAY: [unknown, number] = [null, 0]\r\nconst NO_SUBSCRIPTION_ARRAY = [null, null]\r\n\r\n// Attempts to stringify whatever not-really-a-component value we were given\r\n// for logging in an error message\r\nconst stringifyComponent = (Comp: unknown) => {\r\n  try {\r\n    return JSON.stringify(Comp)\r\n  } catch (err) {\r\n    return String(Comp)\r\n  }\r\n}\r\n\r\ntype EffectFunc = (...args: any[]) => void | ReturnType<React.EffectCallback>\r\n\r\n// This is \"just\" a `useLayoutEffect`, but with two modifications:\r\n// - we need to fall back to `useEffect` in SSR to avoid annoying warnings\r\n// - we extract this to a separate function to avoid closing over values\r\n//   and causing memory leaks\r\nfunction useIsomorphicLayoutEffectWithArgs(\r\n  effectFunc: EffectFunc,\r\n  effectArgs: any[],\r\n  dependencies?: React.DependencyList\r\n) {\r\n  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies)\r\n}\r\n\r\n// Effect callback, extracted: assign the latest props values to refs for later usage\r\nfunction captureWrapperProps(\r\n  lastWrapperProps: React.MutableRefObject<unknown>,\r\n  lastChildProps: React.MutableRefObject<unknown>,\r\n  renderIsScheduled: React.MutableRefObject<boolean>,\r\n  wrapperProps: unknown,\r\n  // actualChildProps: unknown,\r\n  childPropsFromStoreUpdate: React.MutableRefObject<unknown>,\r\n  notifyNestedSubs: () => void\r\n) {\r\n  // We want to capture the wrapper props and child props we used for later comparisons\r\n  lastWrapperProps.current = wrapperProps\r\n  renderIsScheduled.current = false\r\n\r\n  // If the render was from a store update, clear out that reference and cascade the subscriber update\r\n  if (childPropsFromStoreUpdate.current) {\r\n    childPropsFromStoreUpdate.current = null\r\n    notifyNestedSubs()\r\n  }\r\n}\r\n\r\n// Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,\r\n// check for updates after dispatched actions, and trigger re-renders.\r\nfunction subscribeUpdates(\r\n  shouldHandleStateChanges: boolean,\r\n  store: Store,\r\n  subscription: Subscription,\r\n  childPropsSelector: (state: unknown, props: unknown) => unknown,\r\n  lastWrapperProps: React.MutableRefObject<unknown>,\r\n  lastChildProps: React.MutableRefObject<unknown>,\r\n  renderIsScheduled: React.MutableRefObject<boolean>,\r\n  isMounted: React.MutableRefObject<boolean>,\r\n  childPropsFromStoreUpdate: React.MutableRefObject<unknown>,\r\n  notifyNestedSubs: () => void,\r\n  // forceComponentUpdateDispatch: React.Dispatch<any>,\r\n  additionalSubscribeListener: () => void\r\n) {\r\n  // If we're not subscribed to the store, nothing to do here\r\n  if (!shouldHandleStateChanges) return () => {}\r\n\r\n  // Capture values for checking if and when this component unmounts\r\n  let didUnsubscribe = false\r\n  let lastThrownError: Error | null = null\r\n\r\n  // We'll run this callback every time a store subscription update propagates to this component\r\n  const checkForUpdates = () => {\r\n    if (didUnsubscribe || !isMounted.current) {\r\n      // Don't run stale listeners.\r\n      // Redux doesn't guarantee unsubscriptions happen until next dispatch.\r\n      return\r\n    }\r\n\r\n    // TODO We're currently calling getState ourselves here, rather than letting `uSES` do it\r\n    const latestStoreState = store.getState()\r\n\r\n    let newChildProps, error\r\n    try {\r\n      // Actually run the selector with the most recent store state and wrapper props\r\n      // to determine what the child props should be\r\n      newChildProps = childPropsSelector(\r\n        latestStoreState,\r\n        lastWrapperProps.current\r\n      )\r\n    } catch (e) {\r\n      error = e\r\n      lastThrownError = e as Error | null\r\n    }\r\n\r\n    if (!error) {\r\n      lastThrownError = null\r\n    }\r\n\r\n    // If the child props haven't changed, nothing to do here - cascade the subscription update\r\n    if (newChildProps === lastChildProps.current) {\r\n      if (!renderIsScheduled.current) {\r\n        notifyNestedSubs()\r\n      }\r\n    } else {\r\n      // Save references to the new child props.  Note that we track the \"child props from store update\"\r\n      // as a ref instead of a useState/useReducer because we need a way to determine if that value has\r\n      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without\r\n      // forcing another re-render, which we don't want.\r\n      lastChildProps.current = newChildProps\r\n      childPropsFromStoreUpdate.current = newChildProps\r\n      renderIsScheduled.current = true\r\n\r\n      // TODO This is hacky and not how `uSES` is meant to be used\r\n      // Trigger the React `useSyncExternalStore` subscriber\r\n      additionalSubscribeListener()\r\n    }\r\n  }\r\n\r\n  // Actually subscribe to the nearest connected ancestor (or store)\r\n  subscription.onStateChange = checkForUpdates\r\n  subscription.trySubscribe()\r\n\r\n  // Pull data from the store after first render in case the store has\r\n  // changed since we began.\r\n  checkForUpdates()\r\n\r\n  const unsubscribeWrapper = () => {\r\n    didUnsubscribe = true\r\n    subscription.tryUnsubscribe()\r\n    subscription.onStateChange = null\r\n\r\n    if (lastThrownError) {\r\n      // It's possible that we caught an error due to a bad mapState function, but the\r\n      // parent re-rendered without this component and we're about to unmount.\r\n      // This shouldn't happen as long as we do top-down subscriptions correctly, but\r\n      // if we ever do those wrong, this throw will surface the error in our tests.\r\n      // In that case, throw the error from here so it doesn't get lost.\r\n      throw lastThrownError\r\n    }\r\n  }\r\n\r\n  return unsubscribeWrapper\r\n}\r\n\r\n// Reducer initial state creation for our update reducer\r\nconst initStateUpdates = () => EMPTY_ARRAY\r\n\r\nexport interface ConnectProps {\r\n  /** A custom Context instance that the component can use to access the store from an alternate Provider using that same Context instance */\r\n  context?: ReactReduxContextInstance\r\n  /** A Redux store instance to be used for subscriptions instead of the store from a Provider */\r\n  store?: Store\r\n}\r\n\r\ninterface InternalConnectProps extends ConnectProps {\r\n  reactReduxForwardedRef?: React.ForwardedRef<unknown>\r\n}\r\n\r\nfunction strictEqual(a: unknown, b: unknown) {\r\n  return a === b\r\n}\r\n\r\n/**\r\n * Infers the type of props that a connector will inject into a component.\r\n */\r\nexport type ConnectedProps<TConnector> =\r\n  TConnector extends InferableComponentEnhancerWithProps<\r\n    infer TInjectedProps,\r\n    any\r\n  >\r\n    ? unknown extends TInjectedProps\r\n      ? TConnector extends InferableComponentEnhancer<infer TInjectedProps>\r\n        ? TInjectedProps\r\n        : never\r\n      : TInjectedProps\r\n    : never\r\n\r\nexport interface ConnectOptions<\r\n  State = unknown,\r\n  TStateProps = {},\r\n  TOwnProps = {},\r\n  TMergedProps = {}\r\n> {\r\n  forwardRef?: boolean\r\n  context?: typeof ReactReduxContext\r\n  areStatesEqual?: (\r\n    nextState: State,\r\n    prevState: State,\r\n    nextOwnProps: TOwnProps,\r\n    prevOwnProps: TOwnProps\r\n  ) => boolean\r\n\r\n  areOwnPropsEqual?: (\r\n    nextOwnProps: TOwnProps,\r\n    prevOwnProps: TOwnProps\r\n  ) => boolean\r\n\r\n  areStatePropsEqual?: (\r\n    nextStateProps: TStateProps,\r\n    prevStateProps: TStateProps\r\n  ) => boolean\r\n  areMergedPropsEqual?: (\r\n    nextMergedProps: TMergedProps,\r\n    prevMergedProps: TMergedProps\r\n  ) => boolean\r\n}\r\n\r\n/**\r\n * Connects a React component to a Redux store.\r\n *\r\n * - Without arguments, just wraps the component, without changing the behavior / props\r\n *\r\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\r\n * is to override ownProps (as stated in the docs), so what remains is everything that's\r\n * not a state or dispatch prop\r\n *\r\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\r\n * should be valid component props, because it depends on mergeProps implementation.\r\n * As such, it is the user's responsibility to extend ownProps interface from state or\r\n * dispatch props or both when applicable\r\n *\r\n * @param mapStateToProps\r\n * @param mapDispatchToProps\r\n * @param mergeProps\r\n * @param options\r\n */\r\nexport interface Connect<DefaultState = unknown> {\r\n  // tslint:disable:no-unnecessary-generics\r\n  (): InferableComponentEnhancer<DispatchProp>\r\n\r\n  /** mapState only */\r\n  <TStateProps = {}, no_dispatch = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>\r\n  ): InferableComponentEnhancerWithProps<TStateProps & DispatchProp, TOwnProps>\r\n\r\n  /** mapDispatch only (as a function) */\r\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(\r\n    mapStateToProps: null | undefined,\r\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<TDispatchProps, TOwnProps>\r\n\r\n  /** mapDispatch only (as an object) */\r\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(\r\n    mapStateToProps: null | undefined,\r\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<\r\n    ResolveThunks<TDispatchProps>,\r\n    TOwnProps\r\n  >\r\n\r\n  /** mapState and mapDispatch (as a function)*/\r\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<\r\n    TStateProps & TDispatchProps,\r\n    TOwnProps\r\n  >\r\n\r\n  /** mapState and mapDispatch (nullish) */\r\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: null | undefined\r\n  ): InferableComponentEnhancerWithProps<TStateProps, TOwnProps>\r\n\r\n  /** mapState and mapDispatch (as an object) */\r\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<\r\n    TStateProps & ResolveThunks<TDispatchProps>,\r\n    TOwnProps\r\n  >\r\n\r\n  /** mergeProps only */\r\n  <no_state = {}, no_dispatch = {}, TOwnProps = {}, TMergedProps = {}>(\r\n    mapStateToProps: null | undefined,\r\n    mapDispatchToProps: null | undefined,\r\n    mergeProps: MergeProps<undefined, DispatchProp, TOwnProps, TMergedProps>\r\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\r\n\r\n  /** mapState and mergeProps */\r\n  <\r\n    TStateProps = {},\r\n    no_dispatch = {},\r\n    TOwnProps = {},\r\n    TMergedProps = {},\r\n    State = DefaultState\r\n  >(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: null | undefined,\r\n    mergeProps: MergeProps<TStateProps, DispatchProp, TOwnProps, TMergedProps>\r\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\r\n\r\n  /** mapDispatch (as a object) and mergeProps */\r\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}, TMergedProps = {}>(\r\n    mapStateToProps: null | undefined,\r\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\r\n    mergeProps: MergeProps<undefined, TDispatchProps, TOwnProps, TMergedProps>\r\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\r\n\r\n  /** mapState and options */\r\n  <TStateProps = {}, no_dispatch = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: null | undefined,\r\n    mergeProps: null | undefined,\r\n    options: ConnectOptions<State, TStateProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<DispatchProp & TStateProps, TOwnProps>\r\n\r\n  /** mapDispatch (as a function) and options */\r\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}>(\r\n    mapStateToProps: null | undefined,\r\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\r\n    mergeProps: null | undefined,\r\n    options: ConnectOptions<{}, TStateProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<TDispatchProps, TOwnProps>\r\n\r\n  /** mapDispatch (as an object) and options*/\r\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}>(\r\n    mapStateToProps: null | undefined,\r\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\r\n    mergeProps: null | undefined,\r\n    options: ConnectOptions<{}, TStateProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<\r\n    ResolveThunks<TDispatchProps>,\r\n    TOwnProps\r\n  >\r\n\r\n  /** mapState,  mapDispatch (as a function), and options */\r\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\r\n    mergeProps: null | undefined,\r\n    options: ConnectOptions<State, TStateProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<\r\n    TStateProps & TDispatchProps,\r\n    TOwnProps\r\n  >\r\n\r\n  /** mapState,  mapDispatch (as an object), and options */\r\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\r\n    mergeProps: null | undefined,\r\n    options: ConnectOptions<State, TStateProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<\r\n    TStateProps & ResolveThunks<TDispatchProps>,\r\n    TOwnProps\r\n  >\r\n\r\n  /** mapState, mapDispatch, mergeProps, and options */\r\n  <\r\n    TStateProps = {},\r\n    TDispatchProps = {},\r\n    TOwnProps = {},\r\n    TMergedProps = {},\r\n    State = DefaultState\r\n  >(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\r\n    mergeProps: MergeProps<\r\n      TStateProps,\r\n      TDispatchProps,\r\n      TOwnProps,\r\n      TMergedProps\r\n    >,\r\n    options?: ConnectOptions<State, TStateProps, TOwnProps, TMergedProps>\r\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\r\n  // tslint:enable:no-unnecessary-generics\r\n}\r\n\r\nlet hasWarnedAboutDeprecatedPureOption = false\r\n\r\n/**\r\n * Connects a React component to a Redux store.\r\n *\r\n * - Without arguments, just wraps the component, without changing the behavior / props\r\n *\r\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\r\n * is to override ownProps (as stated in the docs), so what remains is everything that's\r\n * not a state or dispatch prop\r\n *\r\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\r\n * should be valid component props, because it depends on mergeProps implementation.\r\n * As such, it is the user's responsibility to extend ownProps interface from state or\r\n * dispatch props or both when applicable\r\n *\r\n * @param mapStateToProps A function that extracts values from state\r\n * @param mapDispatchToProps Setup for dispatching actions\r\n * @param mergeProps Optional callback to merge state and dispatch props together\r\n * @param options Options for configuring the connection\r\n *\r\n */\r\nfunction connect<\r\n  TStateProps = {},\r\n  TDispatchProps = {},\r\n  TOwnProps = {},\r\n  TMergedProps = {},\r\n  State = unknown\r\n>(\r\n  mapStateToProps?: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n  mapDispatchToProps?: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\r\n  mergeProps?: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>,\r\n  {\r\n    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\r\n    // @ts-ignore\r\n    pure,\r\n    areStatesEqual = strictEqual,\r\n    areOwnPropsEqual = shallowEqual,\r\n    areStatePropsEqual = shallowEqual,\r\n    areMergedPropsEqual = shallowEqual,\r\n\r\n    // use React's forwardRef to expose a ref of the wrapped component\r\n    forwardRef = false,\r\n\r\n    // the context consumer to use\r\n    context = ReactReduxContext,\r\n  }: ConnectOptions<unknown, unknown, unknown, unknown> = {}\r\n): unknown {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (pure !== undefined && !hasWarnedAboutDeprecatedPureOption) {\r\n      hasWarnedAboutDeprecatedPureOption = true\r\n      warning(\r\n        'The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component'\r\n      )\r\n    }\r\n  }\r\n\r\n  const Context = context\r\n\r\n  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps)\r\n  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps)\r\n  const initMergeProps = mergePropsFactory(mergeProps)\r\n\r\n  const shouldHandleStateChanges = Boolean(mapStateToProps)\r\n\r\n  const wrapWithConnect = <TProps,>(\r\n    WrappedComponent: ComponentType<TProps>\r\n  ) => {\r\n    type WrappedComponentProps = TProps &\r\n      ConnectPropsMaybeWithoutContext<TProps>\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      const isValid = /*#__PURE__*/ isValidElementType(WrappedComponent)\r\n      if (!isValid)\r\n        throw new Error(\r\n          `You must pass a component to the function returned by connect. Instead received ${stringifyComponent(\r\n            WrappedComponent\r\n          )}`\r\n        )\r\n    }\r\n\r\n    const wrappedComponentName =\r\n      WrappedComponent.displayName || WrappedComponent.name || 'Component'\r\n\r\n    const displayName = `Connect(${wrappedComponentName})`\r\n\r\n    const selectorFactoryOptions: SelectorFactoryOptions<\r\n      any,\r\n      any,\r\n      any,\r\n      any,\r\n      State\r\n    > = {\r\n      shouldHandleStateChanges,\r\n      displayName,\r\n      wrappedComponentName,\r\n      WrappedComponent,\r\n      // @ts-ignore\r\n      initMapStateToProps,\r\n      // @ts-ignore\r\n      initMapDispatchToProps,\r\n      initMergeProps,\r\n      areStatesEqual,\r\n      areStatePropsEqual,\r\n      areOwnPropsEqual,\r\n      areMergedPropsEqual,\r\n    }\r\n\r\n    function ConnectFunction<TOwnProps>(\r\n      props: InternalConnectProps & TOwnProps\r\n    ) {\r\n      const [propsContext, reactReduxForwardedRef, wrapperProps] =\r\n        React.useMemo(() => {\r\n          // Distinguish between actual \"data\" props that were passed to the wrapper component,\r\n          // and values needed to control behavior (forwarded refs, alternate context instances).\r\n          // To maintain the wrapperProps object reference, memoize this destructuring.\r\n          const { reactReduxForwardedRef, ...wrapperProps } = props\r\n          return [props.context, reactReduxForwardedRef, wrapperProps]\r\n        }, [props])\r\n\r\n      const ContextToUse: ReactReduxContextInstance = React.useMemo(() => {\r\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\r\n        // Memoize the check that determines which context instance we should use.\r\n        let ResultContext = Context\r\n        if (propsContext?.Consumer) {\r\n          if (process.env.NODE_ENV !== 'production') {\r\n            const isValid = /*#__PURE__*/ isContextConsumer(\r\n              // @ts-ignore\r\n              <propsContext.Consumer />\r\n            )\r\n            if (!isValid) {\r\n              throw new Error(\r\n                'You must pass a valid React context consumer as `props.context`'\r\n              )\r\n            }\r\n            ResultContext = propsContext\r\n          }\r\n        }\r\n        return ResultContext\r\n      }, [propsContext, Context])\r\n\r\n      // Retrieve the store and ancestor subscription via context, if available\r\n      const contextValue = React.useContext(ContextToUse)\r\n\r\n      // The store _must_ exist as either a prop or in context.\r\n      // We'll check to see if it _looks_ like a Redux store first.\r\n      // This allows us to pass through a `store` prop that is just a plain value.\r\n      const didStoreComeFromProps =\r\n        Boolean(props.store) &&\r\n        Boolean(props.store!.getState) &&\r\n        Boolean(props.store!.dispatch)\r\n      const didStoreComeFromContext =\r\n        Boolean(contextValue) && Boolean(contextValue!.store)\r\n\r\n      if (\r\n        process.env.NODE_ENV !== 'production' &&\r\n        !didStoreComeFromProps &&\r\n        !didStoreComeFromContext\r\n      ) {\r\n        throw new Error(\r\n          `Could not find \"store\" in the context of ` +\r\n            `\"${displayName}\". Either wrap the root component in a <Provider>, ` +\r\n            `or pass a custom React context provider to <Provider> and the corresponding ` +\r\n            `React context consumer to ${displayName} in connect options.`\r\n        )\r\n      }\r\n\r\n      // Based on the previous check, one of these must be true\r\n      const store: Store = didStoreComeFromProps\r\n        ? props.store!\r\n        : contextValue!.store\r\n\r\n      const getServerState = didStoreComeFromContext\r\n        ? contextValue!.getServerState\r\n        : store.getState\r\n\r\n      const childPropsSelector = React.useMemo(() => {\r\n        // The child props selector needs the store reference as an input.\r\n        // Re-create this selector whenever the store changes.\r\n        return defaultSelectorFactory(store.dispatch, selectorFactoryOptions)\r\n      }, [store])\r\n\r\n      const [subscription, notifyNestedSubs] = React.useMemo(() => {\r\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY\r\n\r\n        // This Subscription's source should match where store came from: props vs. context. A component\r\n        // connected to the store via props shouldn't use subscription from context, or vice versa.\r\n        const subscription = createSubscription(\r\n          store,\r\n          didStoreComeFromProps ? undefined : contextValue!.subscription\r\n        )\r\n\r\n        // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\r\n        // the middle of the notification loop, where `subscription` will then be null. This can\r\n        // probably be avoided if Subscription's listeners logic is changed to not call listeners\r\n        // that have been unsubscribed in the  middle of the notification loop.\r\n        const notifyNestedSubs =\r\n          subscription.notifyNestedSubs.bind(subscription)\r\n\r\n        return [subscription, notifyNestedSubs]\r\n      }, [store, didStoreComeFromProps, contextValue])\r\n\r\n      // Determine what {store, subscription} value should be put into nested context, if necessary,\r\n      // and memoize that value to avoid unnecessary context updates.\r\n      const overriddenContextValue = React.useMemo(() => {\r\n        if (didStoreComeFromProps) {\r\n          // This component is directly subscribed to a store from props.\r\n          // We don't want descendants reading from this store - pass down whatever\r\n          // the existing context value is from the nearest connected ancestor.\r\n          return contextValue!\r\n        }\r\n\r\n        // Otherwise, put this component's subscription instance into context, so that\r\n        // connected descendants won't update until after this component is done\r\n        return {\r\n          ...contextValue,\r\n          subscription,\r\n        } as ReactReduxContextValue\r\n      }, [didStoreComeFromProps, contextValue, subscription])\r\n\r\n      // Set up refs to coordinate values between the subscription effect and the render logic\r\n      const lastChildProps = React.useRef<unknown>()\r\n      const lastWrapperProps = React.useRef(wrapperProps)\r\n      const childPropsFromStoreUpdate = React.useRef<unknown>()\r\n      const renderIsScheduled = React.useRef(false)\r\n      const isProcessingDispatch = React.useRef(false)\r\n      const isMounted = React.useRef(false)\r\n\r\n      const latestSubscriptionCallbackError = React.useRef<Error>()\r\n\r\n      useIsomorphicLayoutEffect(() => {\r\n        isMounted.current = true\r\n        return () => {\r\n          isMounted.current = false\r\n        }\r\n      }, [])\r\n\r\n      const actualChildPropsSelector = React.useMemo(() => {\r\n        const selector = () => {\r\n          // Tricky logic here:\r\n          // - This render may have been triggered by a Redux store update that produced new child props\r\n          // - However, we may have gotten new wrapper props after that\r\n          // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\r\n          // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\r\n          // So, we'll use the child props from store update only if the wrapper props are the same as last time.\r\n          if (\r\n            childPropsFromStoreUpdate.current &&\r\n            wrapperProps === lastWrapperProps.current\r\n          ) {\r\n            return childPropsFromStoreUpdate.current\r\n          }\r\n\r\n          // TODO We're reading the store directly in render() here. Bad idea?\r\n          // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\r\n          // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\r\n          // to determine what the child props should be.\r\n          return childPropsSelector(store.getState(), wrapperProps)\r\n        }\r\n        return selector\r\n      }, [store, wrapperProps])\r\n\r\n      // We need this to execute synchronously every time we re-render. However, React warns\r\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\r\n      // just useEffect instead to avoid the warning, since neither will run anyway.\r\n\r\n      const subscribeForReact = React.useMemo(() => {\r\n        const subscribe = (reactListener: () => void) => {\r\n          if (!subscription) {\r\n            return () => {}\r\n          }\r\n\r\n          return subscribeUpdates(\r\n            shouldHandleStateChanges,\r\n            store,\r\n            subscription,\r\n            // @ts-ignore\r\n            childPropsSelector,\r\n            lastWrapperProps,\r\n            lastChildProps,\r\n            renderIsScheduled,\r\n            isMounted,\r\n            childPropsFromStoreUpdate,\r\n            notifyNestedSubs,\r\n            reactListener\r\n          )\r\n        }\r\n\r\n        return subscribe\r\n      }, [subscription])\r\n\r\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [\r\n        lastWrapperProps,\r\n        lastChildProps,\r\n        renderIsScheduled,\r\n        wrapperProps,\r\n        childPropsFromStoreUpdate,\r\n        notifyNestedSubs,\r\n      ])\r\n\r\n      let actualChildProps: Record<string, unknown>\r\n\r\n      try {\r\n        actualChildProps = useSyncExternalStore(\r\n          // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\r\n          subscribeForReact,\r\n          // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\r\n          // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\r\n          actualChildPropsSelector,\r\n          getServerState\r\n            ? () => childPropsSelector(getServerState(), wrapperProps)\r\n            : actualChildPropsSelector\r\n        )\r\n      } catch (err) {\r\n        if (latestSubscriptionCallbackError.current) {\r\n          ;(\r\n            err as Error\r\n          ).message += `\\nThe error may be correlated with this previous error:\\n${latestSubscriptionCallbackError.current.stack}\\n\\n`\r\n        }\r\n\r\n        throw err\r\n      }\r\n\r\n      useIsomorphicLayoutEffect(() => {\r\n        latestSubscriptionCallbackError.current = undefined\r\n        childPropsFromStoreUpdate.current = undefined\r\n        lastChildProps.current = actualChildProps\r\n      })\r\n\r\n      // Now that all that's done, we can finally try to actually render the child component.\r\n      // We memoize the elements for the rendered child component as an optimization.\r\n      const renderedWrappedComponent = React.useMemo(() => {\r\n        return (\r\n          // @ts-ignore\r\n          <WrappedComponent\r\n            {...actualChildProps}\r\n            ref={reactReduxForwardedRef}\r\n          />\r\n        )\r\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps])\r\n\r\n      // If React sees the exact same element reference as last time, it bails out of re-rendering\r\n      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\r\n      const renderedChild = React.useMemo(() => {\r\n        if (shouldHandleStateChanges) {\r\n          // If this component is subscribed to store updates, we need to pass its own\r\n          // subscription instance down to our descendants. That means rendering the same\r\n          // Context instance, and putting a different value into the context.\r\n          return (\r\n            <ContextToUse.Provider value={overriddenContextValue}>\r\n              {renderedWrappedComponent}\r\n            </ContextToUse.Provider>\r\n          )\r\n        }\r\n\r\n        return renderedWrappedComponent\r\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue])\r\n\r\n      return renderedChild\r\n    }\r\n\r\n    const _Connect = React.memo(ConnectFunction)\r\n\r\n    type ConnectedWrapperComponent = typeof _Connect & {\r\n      WrappedComponent: typeof WrappedComponent\r\n    }\r\n\r\n    // Add a hacky cast to get the right output type\r\n    const Connect = _Connect as unknown as ConnectedComponent<\r\n      typeof WrappedComponent,\r\n      WrappedComponentProps\r\n    >\r\n    Connect.WrappedComponent = WrappedComponent\r\n    Connect.displayName = ConnectFunction.displayName = displayName\r\n\r\n    if (forwardRef) {\r\n      const _forwarded = React.forwardRef(function forwardConnectRef(\r\n        props,\r\n        ref\r\n      ) {\r\n        // @ts-ignore\r\n        return <Connect {...props} reactReduxForwardedRef={ref} />\r\n      })\r\n\r\n      const forwarded = _forwarded as ConnectedWrapperComponent\r\n      forwarded.displayName = displayName\r\n      forwarded.WrappedComponent = WrappedComponent\r\n      return /*#__PURE__*/ hoistStatics(forwarded, WrappedComponent)\r\n    }\r\n\r\n    return /*#__PURE__*/ hoistStatics(Connect, WrappedComponent)\r\n  }\r\n\r\n  return wrapWithConnect\r\n}\r\n\r\nexport default connect as Connect\r\n","import type { Context, ReactNode } from 'react'\r\nimport { React } from '../utils/react'\r\nimport type { Action, Store, UnknownAction } from 'redux'\r\nimport type { DevModeCheckFrequency } from '../hooks/useSelector'\r\nimport { createSubscription } from '../utils/Subscription'\r\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect'\r\nimport type { ReactReduxContextValue } from './Context'\r\nimport { ReactReduxContext } from './Context'\r\n\r\nexport interface ProviderProps<\r\n  A extends Action<string> = UnknownAction,\r\n  S = unknown\r\n> {\r\n  /**\r\n   * The single Redux store in your application.\r\n   */\r\n  store: Store<S, A>\r\n\r\n  /**\r\n   * An optional server state snapshot. Will be used during initial hydration render if available, to ensure that the UI output is consistent with the HTML generated on the server.\r\n   */\r\n  serverState?: S\r\n\r\n  /**\r\n   * Optional context to be used internally in react-redux. Use React.createContext() to create a context to be used.\r\n   * If this is used, you'll need to customize `connect` by supplying the same context provided to the Provider.\r\n   * Set the initial value to null, and the hooks will error\r\n   * if this is not overwritten by Provider.\r\n   */\r\n  context?: Context<ReactReduxContextValue<S, A> | null>\r\n\r\n  /**\r\n   * Determines the frequency of stability checks for all selectors.\r\n   * This setting overrides the global configuration for\r\n   * the `useSelector` stability check, allowing you to specify how often\r\n   * these checks should occur in development mode.\r\n   *\r\n   * @since 8.1.0\r\n   */\r\n  stabilityCheck?: DevModeCheckFrequency\r\n\r\n  /**\r\n   * Determines the frequency of identity function checks for all selectors.\r\n   * This setting overrides the global configuration for\r\n   * the `useSelector` identity function check, allowing you to specify how often\r\n   * these checks should occur in development mode.\r\n   *\r\n   * **Note**: Previously referred to as `noopCheck`.\r\n   *\r\n   * @since 9.0.0\r\n   */\r\n  identityFunctionCheck?: DevModeCheckFrequency\r\n\r\n  children: ReactNode\r\n}\r\n\r\nfunction Provider<A extends Action<string> = UnknownAction, S = unknown>({\r\n  store,\r\n  context,\r\n  children,\r\n  serverState,\r\n  stabilityCheck = 'once',\r\n  identityFunctionCheck = 'once',\r\n}: ProviderProps<A, S>) {\r\n  const contextValue = React.useMemo(() => {\r\n    const subscription = createSubscription(store)\r\n    return {\r\n      store,\r\n      subscription,\r\n      getServerState: serverState ? () => serverState : undefined,\r\n      stabilityCheck,\r\n      identityFunctionCheck,\r\n    }\r\n  }, [store, serverState, stabilityCheck, identityFunctionCheck])\r\n\r\n  const previousState = React.useMemo(() => store.getState(), [store])\r\n\r\n  useIsomorphicLayoutEffect(() => {\r\n    const { subscription } = contextValue\r\n    subscription.onStateChange = subscription.notifyNestedSubs\r\n    subscription.trySubscribe()\r\n\r\n    if (previousState !== store.getState()) {\r\n      subscription.notifyNestedSubs()\r\n    }\r\n    return () => {\r\n      subscription.tryUnsubscribe()\r\n      subscription.onStateChange = undefined\r\n    }\r\n  }, [contextValue, previousState])\r\n\r\n  const Context = context || ReactReduxContext\r\n\r\n  // @ts-ignore 'AnyAction' is assignable to the constraint of type 'A', but 'A' could be instantiated with a different subtype\r\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>\r\n}\r\n\r\nexport default Provider\r\n","import type { Context } from 'react'\r\nimport type { Action as BasicAction, UnknownAction, Store } from 'redux'\r\nimport type { ReactReduxContextValue } from '../components/Context'\r\nimport { ReactReduxContext } from '../components/Context'\r\nimport {\r\n  useReduxContext as useDefaultReduxContext,\r\n  createReduxContextHook,\r\n} from './useReduxContext'\r\n\r\n/**\r\n * Hook factory, which creates a `useStore` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useStore` hook bound to the specified context.\r\n */\r\nexport function createStoreHook<\r\n  S = unknown,\r\n  A extends BasicAction = UnknownAction\r\n  // @ts-ignore\r\n>(context?: Context<ReactReduxContextValue<S, A> | null> = ReactReduxContext) {\r\n  const useReduxContext =\r\n    // @ts-ignore\r\n    context === ReactReduxContext\r\n      ? useDefaultReduxContext\r\n      : // @ts-ignore\r\n        createReduxContextHook(context)\r\n  return function useStore<\r\n    State = S,\r\n    Action2 extends BasicAction = A\r\n    // @ts-ignore\r\n  >() {\r\n    const { store } = useReduxContext()\r\n    // @ts-ignore\r\n    return store as Store<State, Action2>\r\n  }\r\n}\r\n\r\n/**\r\n * A hook to access the redux store.\r\n *\r\n * @returns {any} the redux store\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useStore } from 'react-redux'\r\n *\r\n * export const ExampleComponent = () => {\r\n *   const store = useStore()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\r\nexport const useStore = /*#__PURE__*/ createStoreHook()\r\n","import type { Action, Dispatch, UnknownAction } from 'redux'\r\nimport type { Context } from 'react'\r\n\r\nimport type { ReactReduxContextValue } from '../components/Context'\r\nimport { ReactReduxContext } from '../components/Context'\r\nimport { useStore as useDefaultStore, createStoreHook } from './useStore'\r\n\r\n/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */\r\nexport function createDispatchHook<\r\n  S = unknown,\r\n  A extends Action<string> = UnknownAction\r\n  // @ts-ignore\r\n>(context?: Context<ReactReduxContextValue<S, A> | null> = ReactReduxContext) {\r\n  const useStore =\r\n    // @ts-ignore\r\n    context === ReactReduxContext ? useDefaultStore : createStoreHook(context)\r\n\r\n  return function useDispatch<\r\n    AppDispatch extends Dispatch<A> = Dispatch<A>\r\n  >(): AppDispatch {\r\n    const store = useStore()\r\n    // @ts-ignore\r\n    return store.dispatch\r\n  }\r\n}\r\n\r\n/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store's `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from 'react'\r\n * import { useDispatch } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */\r\nexport const useDispatch = /*#__PURE__*/ createDispatchHook()\r\n","import Provider from './components/Provider'\r\nimport type { ProviderProps } from './components/Provider'\r\nimport connect from './components/connect'\r\nimport type {\r\n  Connect,\r\n  ConnectProps,\r\n  ConnectedProps,\r\n} from './components/connect'\r\nimport type {\r\n  SelectorFactory,\r\n  Selector,\r\n  MapStateToProps,\r\n  MapStateToPropsFactory,\r\n  MapStateToPropsParam,\r\n  MapDispatchToPropsFunction,\r\n  MapDispatchToProps,\r\n  MapDispatchToPropsFactory,\r\n  MapDispatchToPropsParam,\r\n  MapDispatchToPropsNonObject,\r\n  MergeProps,\r\n} from './connect/selectorFactory'\r\nimport { ReactReduxContext } from './components/Context'\r\nimport type { ReactReduxContextValue } from './components/Context'\r\n\r\nimport { useDispatch, createDispatchHook } from './hooks/useDispatch'\r\nimport { useSelector, createSelectorHook } from './hooks/useSelector'\r\nimport { useStore, createStoreHook } from './hooks/useStore'\r\n\r\nimport shallowEqual from './utils/shallowEqual'\r\nimport type { Subscription } from './utils/Subscription'\r\nimport { defaultNoopBatch } from './utils/batch'\r\n\r\nexport * from './types'\r\nexport type {\r\n  ProviderProps,\r\n  SelectorFactory,\r\n  Selector,\r\n  MapStateToProps,\r\n  MapStateToPropsFactory,\r\n  MapStateToPropsParam,\r\n  Connect,\r\n  ConnectProps,\r\n  ConnectedProps,\r\n  MapDispatchToPropsFunction,\r\n  MapDispatchToProps,\r\n  MapDispatchToPropsFactory,\r\n  MapDispatchToPropsParam,\r\n  MapDispatchToPropsNonObject,\r\n  MergeProps,\r\n  ReactReduxContextValue,\r\n  Subscription,\r\n}\r\n\r\n/**\r\n * @deprecated As of React 18, batching is enabled by default for ReactDOM and React Native.\r\n * This is now a no-op that immediately runs the callback.\r\n */\r\nconst batch = defaultNoopBatch\r\n\r\nexport {\r\n  Provider,\r\n  ReactReduxContext,\r\n  connect,\r\n  useDispatch,\r\n  createDispatchHook,\r\n  useSelector,\r\n  createSelectorHook,\r\n  useStore,\r\n  createStoreHook,\r\n  shallowEqual,\r\n  batch,\r\n}\r\n"]},"metadata":{},"sourceType":"module"}